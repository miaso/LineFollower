
pwm1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002356  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000090  00800060  00002356  000023ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000066  008000f0  008000f0  0000247a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000247a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001b0  00000000  00000000  000024d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011c2  00000000  00000000  00002686  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004db  00000000  00000000  00003848  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000785  00000000  00000000  00003d23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000578  00000000  00000000  000044a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000565  00000000  00000000  00004a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000db7  00000000  00000000  00004f85  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000170  00000000  00000000  00005d3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 82 00 	jmp	0x104	; 0x104 <__ctors_end>
       4:	0c 94 19 06 	jmp	0xc32	; 0xc32 <__vector_1>
       8:	0c 94 6d 06 	jmp	0xcda	; 0xcda <__vector_2>
       c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      10:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__vector_4>
      14:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      18:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      1c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      20:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      24:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      28:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      2c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      30:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      34:	0c 94 c1 06 	jmp	0xd82	; 0xd82 <__vector_13>
      38:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      3c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      40:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__vector_16>
      44:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      48:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      4c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      50:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      54:	21 08       	sbc	r2, r1
      56:	97 07       	cpc	r25, r23
      58:	ae 07       	cpc	r26, r30
      5a:	c5 07       	cpc	r28, r21
      5c:	dc 07       	cpc	r29, r28
      5e:	f3 07       	cpc	r31, r19
      60:	0a 08       	sbc	r0, r10
      62:	49 08       	sbc	r4, r9
      64:	49 08       	sbc	r4, r9
      66:	49 08       	sbc	r4, r9
      68:	49 08       	sbc	r4, r9
      6a:	49 08       	sbc	r4, r9
      6c:	49 08       	sbc	r4, r9
      6e:	49 08       	sbc	r4, r9
      70:	49 08       	sbc	r4, r9
      72:	49 08       	sbc	r4, r9
      74:	49 08       	sbc	r4, r9
      76:	49 08       	sbc	r4, r9
      78:	49 08       	sbc	r4, r9
      7a:	49 08       	sbc	r4, r9
      7c:	49 08       	sbc	r4, r9
      7e:	49 08       	sbc	r4, r9
      80:	49 08       	sbc	r4, r9
      82:	49 08       	sbc	r4, r9
      84:	49 08       	sbc	r4, r9
      86:	49 08       	sbc	r4, r9
      88:	49 08       	sbc	r4, r9
      8a:	49 08       	sbc	r4, r9
      8c:	49 08       	sbc	r4, r9
      8e:	49 08       	sbc	r4, r9
      90:	49 08       	sbc	r4, r9
      92:	49 08       	sbc	r4, r9
      94:	49 08       	sbc	r4, r9
      96:	49 08       	sbc	r4, r9
      98:	49 08       	sbc	r4, r9
      9a:	49 08       	sbc	r4, r9
      9c:	49 08       	sbc	r4, r9
      9e:	49 08       	sbc	r4, r9
      a0:	49 08       	sbc	r4, r9
      a2:	49 08       	sbc	r4, r9
      a4:	49 08       	sbc	r4, r9
      a6:	49 08       	sbc	r4, r9
      a8:	49 08       	sbc	r4, r9
      aa:	49 08       	sbc	r4, r9
      ac:	49 08       	sbc	r4, r9
      ae:	49 08       	sbc	r4, r9
      b0:	49 08       	sbc	r4, r9
      b2:	49 08       	sbc	r4, r9
      b4:	49 08       	sbc	r4, r9
      b6:	02 07       	cpc	r16, r18
      b8:	49 08       	sbc	r4, r9
      ba:	49 08       	sbc	r4, r9
      bc:	05 07       	cpc	r16, r21
      be:	0b 07       	cpc	r16, r27
      c0:	49 08       	sbc	r4, r9
      c2:	49 08       	sbc	r4, r9
      c4:	49 08       	sbc	r4, r9
      c6:	49 08       	sbc	r4, r9
      c8:	49 08       	sbc	r4, r9
      ca:	69 07       	cpc	r22, r25
      cc:	80 07       	cpc	r24, r16
      ce:	49 08       	sbc	r4, r9
      d0:	49 08       	sbc	r4, r9
      d2:	49 08       	sbc	r4, r9
      d4:	49 08       	sbc	r4, r9
      d6:	22 07       	cpc	r18, r18
      d8:	49 08       	sbc	r4, r9
      da:	08 07       	cpc	r16, r24
      dc:	39 07       	cpc	r19, r25
      de:	49 08       	sbc	r4, r9
      e0:	49 08       	sbc	r4, r9
      e2:	e0 06       	cpc	r14, r16
      e4:	49 08       	sbc	r4, r9
      e6:	49 08       	sbc	r4, r9
      e8:	ff 06       	cpc	r15, r31
      ea:	0a 09       	sbc	r16, r10
      ec:	20 09       	sbc	r18, r0
      ee:	46 09       	sbc	r20, r6
      f0:	9f 0c       	add	r9, r15
      f2:	9f 0c       	add	r9, r15
      f4:	5a 09       	sbc	r21, r10
      f6:	06 0a       	sbc	r0, r22
      f8:	24 0a       	sbc	r2, r20
      fa:	38 0a       	sbc	r3, r24
      fc:	9f 0c       	add	r9, r15
      fe:	70 0a       	sbc	r7, r16
     100:	79 0c       	add	r7, r9
     102:	9a 0c       	add	r9, r10

00000104 <__ctors_end>:
     104:	11 24       	eor	r1, r1
     106:	1f be       	out	0x3f, r1	; 63
     108:	cf e5       	ldi	r28, 0x5F	; 95
     10a:	d8 e0       	ldi	r29, 0x08	; 8
     10c:	de bf       	out	0x3e, r29	; 62
     10e:	cd bf       	out	0x3d, r28	; 61

00000110 <__do_copy_data>:
     110:	10 e0       	ldi	r17, 0x00	; 0
     112:	a0 e6       	ldi	r26, 0x60	; 96
     114:	b0 e0       	ldi	r27, 0x00	; 0
     116:	e6 e5       	ldi	r30, 0x56	; 86
     118:	f3 e2       	ldi	r31, 0x23	; 35
     11a:	02 c0       	rjmp	.+4      	; 0x120 <__do_copy_data+0x10>
     11c:	05 90       	lpm	r0, Z+
     11e:	0d 92       	st	X+, r0
     120:	a0 3f       	cpi	r26, 0xF0	; 240
     122:	b1 07       	cpc	r27, r17
     124:	d9 f7       	brne	.-10     	; 0x11c <__do_copy_data+0xc>

00000126 <__do_clear_bss>:
     126:	21 e0       	ldi	r18, 0x01	; 1
     128:	a0 ef       	ldi	r26, 0xF0	; 240
     12a:	b0 e0       	ldi	r27, 0x00	; 0
     12c:	01 c0       	rjmp	.+2      	; 0x130 <.do_clear_bss_start>

0000012e <.do_clear_bss_loop>:
     12e:	1d 92       	st	X+, r1

00000130 <.do_clear_bss_start>:
     130:	a6 35       	cpi	r26, 0x56	; 86
     132:	b2 07       	cpc	r27, r18
     134:	e1 f7       	brne	.-8      	; 0x12e <.do_clear_bss_loop>
     136:	0e 94 79 08 	call	0x10f2	; 0x10f2 <main>
     13a:	0c 94 a9 11 	jmp	0x2352	; 0x2352 <_exit>

0000013e <__bad_interrupt>:
     13e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000142 <forwardAB>:
#include "driverUSART.h"

void forwardAB()
{
	//A
	PORTC |= (1 << INPUT1);    // Pin 6 goes high = input 2=1
     142:	ab 9a       	sbi	0x15, 3	; 21
	PORTC &= ~(1 << INPUT2);  // Pin pd6 goes low = input 1=0
     144:	aa 98       	cbi	0x15, 2	; 21
	//B
	PORTC |= (1 << INPUT3);    // Pin 6 goes high = input 2=1
     146:	a8 9a       	sbi	0x15, 0	; 21
	PORTC &= ~(1 << INPUT4);  // Pin pd6 goes low = input 1=0
     148:	a9 98       	cbi	0x15, 1	; 21
     14a:	08 95       	ret

0000014c <backwardsAB>:
	//sendStringUSART("both forward\n");
}
void backwardsAB()
{
	//Motor A Left
	PORTC |= (1 << INPUT2);    // Pin 6 goes high = input 2=1
     14c:	aa 9a       	sbi	0x15, 2	; 21
	PORTC &= ~(1 << INPUT1);  // Pin pd6 goes low = input 1=0
     14e:	ab 98       	cbi	0x15, 3	; 21
	//Motor B right
	PORTC |= (1 << INPUT4);    // Pin 6 goes high = input 2=1
     150:	a9 9a       	sbi	0x15, 1	; 21
	PORTC &= ~(1 << INPUT3);  // Pin pd6 goes low = input 1=0
     152:	a8 98       	cbi	0x15, 0	; 21
     154:	08 95       	ret

00000156 <rightOnly>:
	//sendStringUSART("both back\n");  // Pin pd6 goes low = input 1=0
}

void rightOnly(){
	PORTC |=  (1 << INPUT3);    // Pin 6 goes high = input 2=1
     156:	a8 9a       	sbi	0x15, 0	; 21
	PORTC &= ~(1 << INPUT4);  // Pin pd6 goes low = input 1=0
     158:	a9 98       	cbi	0x15, 1	; 21
	PORTC &= ~(1 << INPUT1);
     15a:	ab 98       	cbi	0x15, 3	; 21
	PORTC &= ~(1 << INPUT2);
     15c:	aa 98       	cbi	0x15, 2	; 21
     15e:	08 95       	ret

00000160 <leftOnly>:
	//sendStringUSART("right only\n");
}
void leftOnly(){
	PORTC |= (1 << INPUT1);    // Pin 6 goes high = input 2=1
     160:	ab 9a       	sbi	0x15, 3	; 21
	PORTC &= ~(1 << INPUT2);  // Pin pd6 goes low = input 1=0
     162:	aa 98       	cbi	0x15, 2	; 21
	PORTC &= ~(1 << INPUT3);
     164:	a8 98       	cbi	0x15, 0	; 21
	PORTC &= ~(1 << INPUT4);
     166:	a9 98       	cbi	0x15, 1	; 21
     168:	08 95       	ret

0000016a <stopAB>:
	//sendStringUSART("left only\n");
}
void stopAB(){
	PORTC &= ~(1 << INPUT1);
     16a:	ab 98       	cbi	0x15, 3	; 21
	PORTC &= ~(1 << INPUT2);
     16c:	aa 98       	cbi	0x15, 2	; 21
	PORTC &= ~(1 << INPUT3);
     16e:	a8 98       	cbi	0x15, 0	; 21
	PORTC &= ~(1 << INPUT4);
     170:	a9 98       	cbi	0x15, 1	; 21
     172:	08 95       	ret

00000174 <stopB>:
	//sendStringUSART("both stop\n");
}

void stopB(){
	PORTC |= (1 << INPUT1); 
     174:	ab 9a       	sbi	0x15, 3	; 21
	PORTC |= (1 << INPUT2); 
     176:	aa 9a       	sbi	0x15, 2	; 21
     178:	08 95       	ret

0000017a <stopA>:
}
void stopA(){
	PORTC |= (1 << INPUT3);
     17a:	a8 9a       	sbi	0x15, 0	; 21
	PORTC |= (1 << INPUT4);
     17c:	a9 9a       	sbi	0x15, 1	; 21
     17e:	08 95       	ret

00000180 <forwardB>:
}
void forwardB(){
	PORTC |= (1 << INPUT1);    // Pin 6 goes high = input 2=1
     180:	ab 9a       	sbi	0x15, 3	; 21
	PORTC &= ~(1 << INPUT2);
     182:	aa 98       	cbi	0x15, 2	; 21
     184:	08 95       	ret

00000186 <forwardA>:
}
void forwardA(){
	PORTC |= (1 << INPUT3);    // Pin 6 goes high = input 2=1
     186:	a8 9a       	sbi	0x15, 0	; 21
	PORTC &= ~(1 << INPUT4);
     188:	a9 98       	cbi	0x15, 1	; 21
     18a:	08 95       	ret

0000018c <__vector_16>:

}


ISR(ADC_vect)
{
     18c:	1f 92       	push	r1
     18e:	0f 92       	push	r0
     190:	0f b6       	in	r0, 0x3f	; 63
     192:	0f 92       	push	r0
     194:	11 24       	eor	r1, r1
     196:	8f 93       	push	r24
     198:	9f 93       	push	r25
			//char str[15];
			//sprintf(str, "%d", ADCH);
			
			//sendStringUSART(str);
			//sendStringUSART("\n");
	if(ADCH < 20)
     19a:	85 b1       	in	r24, 0x05	; 5
     19c:	84 31       	cpi	r24, 0x14	; 20
     19e:	38 f4       	brcc	.+14     	; 0x1ae <__vector_16+0x22>
	{
		

		
		OCR1A = 400;
     1a0:	80 e9       	ldi	r24, 0x90	; 144
     1a2:	91 e0       	ldi	r25, 0x01	; 1
     1a4:	9b bd       	out	0x2b, r25	; 43
     1a6:	8a bd       	out	0x2a, r24	; 42
		//OCR1A = 2000;
		OCR1B = 400;
     1a8:	99 bd       	out	0x29, r25	; 41
     1aa:	88 bd       	out	0x28, r24	; 40
     1ac:	04 c0       	rjmp	.+8      	; 0x1b6 <__vector_16+0x2a>
	}
	
	else
	{
		//sendStringUSART(ADCH);
		OCR1A = 0;
     1ae:	1b bc       	out	0x2b, r1	; 43
     1b0:	1a bc       	out	0x2a, r1	; 42
		OCR1B = 0;
     1b2:	19 bc       	out	0x29, r1	; 41
     1b4:	18 bc       	out	0x28, r1	; 40
	}
     1b6:	9f 91       	pop	r25
     1b8:	8f 91       	pop	r24
     1ba:	0f 90       	pop	r0
     1bc:	0f be       	out	0x3f, r0	; 63
     1be:	0f 90       	pop	r0
     1c0:	1f 90       	pop	r1
     1c2:	18 95       	reti

000001c4 <transmitUSART>:
to UDR register. Sends data byte.
-----------------------------------------------------*/
void transmitUSART( char data)
{
	/* Wait for data to be transmitted */
	while ( !(UCSRA & (1<<UDRE)));
     1c4:	5d 9b       	sbis	0x0b, 5	; 11
     1c6:	fe cf       	rjmp	.-4      	; 0x1c4 <transmitUSART>

	UDR = data;
     1c8:	8c b9       	out	0x0c, r24	; 12
     1ca:	08 95       	ret

000001cc <sendStringUSART>:
void sendStringUSART (char *s)
Sends a string through USART. Shifts bytes of array
passed by *s pointer until terminator.
-----------------------------------------------------*/
void sendStringUSART (char *s)
{
     1cc:	cf 93       	push	r28
     1ce:	df 93       	push	r29
     1d0:	ec 01       	movw	r28, r24
	char c = 0;
	for (;(( c=*s)!=0);s++){
     1d2:	88 81       	ld	r24, Y
     1d4:	88 23       	and	r24, r24
     1d6:	31 f0       	breq	.+12     	; 0x1e4 <sendStringUSART+0x18>
     1d8:	21 96       	adiw	r28, 0x01	; 1
		transmitUSART(*s); 
     1da:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <transmitUSART>
passed by *s pointer until terminator.
-----------------------------------------------------*/
void sendStringUSART (char *s)
{
	char c = 0;
	for (;(( c=*s)!=0);s++){
     1de:	89 91       	ld	r24, Y+
     1e0:	81 11       	cpse	r24, r1
     1e2:	fb cf       	rjmp	.-10     	; 0x1da <sendStringUSART+0xe>
		transmitUSART(*s); 
	}
}
     1e4:	df 91       	pop	r29
     1e6:	cf 91       	pop	r28
     1e8:	08 95       	ret

000001ea <sendIntUSART>:

// Send an integer value converted to string through USART
void sendIntUSART(int digit){
     1ea:	0f 93       	push	r16
     1ec:	1f 93       	push	r17
     1ee:	cf 93       	push	r28
     1f0:	df 93       	push	r29
     1f2:	cd b7       	in	r28, 0x3d	; 61
     1f4:	de b7       	in	r29, 0x3e	; 62
     1f6:	2f 97       	sbiw	r28, 0x0f	; 15
     1f8:	0f b6       	in	r0, 0x3f	; 63
     1fa:	f8 94       	cli
     1fc:	de bf       	out	0x3e, r29	; 62
     1fe:	0f be       	out	0x3f, r0	; 63
     200:	cd bf       	out	0x3d, r28	; 61
	char str[15];
	sprintf(str, "%d", digit);
     202:	9f 93       	push	r25
     204:	8f 93       	push	r24
     206:	80 e7       	ldi	r24, 0x70	; 112
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	9f 93       	push	r25
     20c:	8f 93       	push	r24
     20e:	8e 01       	movw	r16, r28
     210:	0f 5f       	subi	r16, 0xFF	; 255
     212:	1f 4f       	sbci	r17, 0xFF	; 255
     214:	1f 93       	push	r17
     216:	0f 93       	push	r16
     218:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <sprintf>
	sendStringUSART(str);
     21c:	c8 01       	movw	r24, r16
     21e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <sendStringUSART>
	sendStringUSART("\n");
     222:	80 ed       	ldi	r24, 0xD0	; 208
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	0e 94 e6 00 	call	0x1cc	; 0x1cc <sendStringUSART>
     22a:	0f 90       	pop	r0
     22c:	0f 90       	pop	r0
     22e:	0f 90       	pop	r0
     230:	0f 90       	pop	r0
     232:	0f 90       	pop	r0
     234:	0f 90       	pop	r0
}
     236:	2f 96       	adiw	r28, 0x0f	; 15
     238:	0f b6       	in	r0, 0x3f	; 63
     23a:	f8 94       	cli
     23c:	de bf       	out	0x3e, r29	; 62
     23e:	0f be       	out	0x3f, r0	; 63
     240:	cd bf       	out	0x3d, r28	; 61
     242:	df 91       	pop	r29
     244:	cf 91       	pop	r28
     246:	1f 91       	pop	r17
     248:	0f 91       	pop	r16
     24a:	08 95       	ret

0000024c <USART_Init>:
format: 1 stop bit, 8 data bits, no parity, full duplex.
Uses int baud parameter to set baud rate while casted.
-----------------------------------------------------*/
void USART_Init()
{
	UCSRB |= (1 << RXEN) | (1 << TXEN);   // Turn on the transmission and reception circuitry
     24c:	8a b1       	in	r24, 0x0a	; 10
     24e:	88 61       	ori	r24, 0x18	; 24
     250:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << URSEL) | (1<<USBS) | (1 << UCSZ0) | (1 << UCSZ1);
     252:	80 b5       	in	r24, 0x20	; 32
     254:	8e 68       	ori	r24, 0x8E	; 142
     256:	80 bd       	out	0x20, r24	; 32
	// Use 8-bit character sizes
	
	UBRRL = BAUD_PRESCALE;
     258:	87 e6       	ldi	r24, 0x67	; 103
     25a:	89 b9       	out	0x09, r24	; 9
	// Load lower 8-bits of the baud rate value into the low byte of the UBRR register
	UBRRH = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value..
     25c:	10 bc       	out	0x20, r1	; 32
	// into the high byte of the UBRR register
	UCSRB |= (1 << RXCIE );
     25e:	57 9a       	sbi	0x0a, 7	; 10
     260:	08 95       	ret

00000262 <sensFull>:
double pulsesAturn=0;
int counter=0;
int fifm=0;

int sensFull(){
	int sensor1 = ((PINA & (1<<PA1))/2);
     262:	99 b3       	in	r25, 0x19	; 25
	int sensor2 = ((PINA & (1<<PA2))/4);
     264:	29 b3       	in	r18, 0x19	; 25
	int sensor3 = ((PINA & (1<<PA3))/8);
     266:	39 b3       	in	r19, 0x19	; 25
	int sensor4 = ((PINA & (1<<PA4))/16);
     268:	49 b3       	in	r20, 0x19	; 25
	int sensor5 = ((PINA & (1<<PA5))/32);
     26a:	59 b3       	in	r21, 0x19	; 25
	int sensor6 = ((PINA & (1<<PA6))/64);
     26c:	69 b3       	in	r22, 0x19	; 25
	int sensor7 = ((PINA & (1<<PA7))/128);
     26e:	89 b3       	in	r24, 0x19	; 25
	
	if     ((sensor1==0)&&(sensor2==0)&&(sensor3==0)&&(sensor4==0)&&(sensor5==0)&&(sensor6==0)&&(sensor7==0))
     270:	91 fd       	sbrc	r25, 1
     272:	15 c0       	rjmp	.+42     	; 0x29e <sensFull+0x3c>
     274:	22 fd       	sbrc	r18, 2
     276:	16 c0       	rjmp	.+44     	; 0x2a4 <sensFull+0x42>
     278:	33 fd       	sbrc	r19, 3
     27a:	17 c0       	rjmp	.+46     	; 0x2aa <sensFull+0x48>
     27c:	44 fd       	sbrc	r20, 4
     27e:	18 c0       	rjmp	.+48     	; 0x2b0 <sensFull+0x4e>
     280:	55 fd       	sbrc	r21, 5
     282:	19 c0       	rjmp	.+50     	; 0x2b6 <sensFull+0x54>
     284:	66 fd       	sbrc	r22, 6
     286:	1a c0       	rjmp	.+52     	; 0x2bc <sensFull+0x5a>
     288:	99 27       	eor	r25, r25
     28a:	87 fd       	sbrc	r24, 7
     28c:	90 95       	com	r25
     28e:	80 95       	com	r24
     290:	90 95       	com	r25
     292:	89 2f       	mov	r24, r25
     294:	88 1f       	adc	r24, r24
     296:	88 27       	eor	r24, r24
     298:	88 1f       	adc	r24, r24
	{return 1;}
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	08 95       	ret
	else{
		return 0;
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	08 95       	ret
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	08 95       	ret
     2aa:	80 e0       	ldi	r24, 0x00	; 0
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	08 95       	ret
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	08 95       	ret
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	08 95       	ret
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	90 e0       	ldi	r25, 0x00	; 0
	}
	
}
     2c0:	08 95       	ret

000002c2 <setBothMotorsRpm>:
		return 0;
	}
	
}
void setBothMotorsRpm(int rpmToSet){
	set_PulsesRef=rpmToSet;
     2c2:	bc 01       	movw	r22, r24
     2c4:	88 27       	eor	r24, r24
     2c6:	77 fd       	sbrc	r23, 7
     2c8:	80 95       	com	r24
     2ca:	98 2f       	mov	r25, r24
     2cc:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatsisf>
     2d0:	60 93 16 01 	sts	0x0116, r22
     2d4:	70 93 17 01 	sts	0x0117, r23
     2d8:	80 93 18 01 	sts	0x0118, r24
     2dc:	90 93 19 01 	sts	0x0119, r25
	set_PulsesA=set_PulsesRef;
     2e0:	60 93 12 01 	sts	0x0112, r22
     2e4:	70 93 13 01 	sts	0x0113, r23
     2e8:	80 93 14 01 	sts	0x0114, r24
     2ec:	90 93 15 01 	sts	0x0115, r25
	set_PulsesB=set_PulsesRef;
     2f0:	60 93 0e 01 	sts	0x010E, r22
     2f4:	70 93 0f 01 	sts	0x010F, r23
     2f8:	80 93 10 01 	sts	0x0110, r24
     2fc:	90 93 11 01 	sts	0x0111, r25
     300:	08 95       	ret

00000302 <btMode>:
}

void btMode(){
	set_PulsesRef=10;
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	a0 e2       	ldi	r26, 0x20	; 32
     308:	b1 e4       	ldi	r27, 0x41	; 65
     30a:	80 93 16 01 	sts	0x0116, r24
     30e:	90 93 17 01 	sts	0x0117, r25
     312:	a0 93 18 01 	sts	0x0118, r26
     316:	b0 93 19 01 	sts	0x0119, r27
	set_PulsesA=0;
     31a:	10 92 12 01 	sts	0x0112, r1
     31e:	10 92 13 01 	sts	0x0113, r1
     322:	10 92 14 01 	sts	0x0114, r1
     326:	10 92 15 01 	sts	0x0115, r1
	set_PulsesB=set_PulsesRef;
     32a:	80 93 0e 01 	sts	0x010E, r24
     32e:	90 93 0f 01 	sts	0x010F, r25
     332:	a0 93 10 01 	sts	0x0110, r26
     336:	b0 93 11 01 	sts	0x0111, r27
     33a:	08 95       	ret

0000033c <init_interrupts>:
}
/********************************/
void init_interrupts(){
	MCUCR |= (1 << ISC01)|(1 << ISC00);	// Rising Edge
     33c:	85 b7       	in	r24, 0x35	; 53
     33e:	83 60       	ori	r24, 0x03	; 3
     340:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0);			   // INT0 Enabled
     342:	8b b7       	in	r24, 0x3b	; 59
     344:	80 64       	ori	r24, 0x40	; 64
     346:	8b bf       	out	0x3b, r24	; 59
	DDRD = 1<<PD2;					  // Set PD2 as input (Using for interupt INT0)
     348:	84 e0       	ldi	r24, 0x04	; 4
     34a:	81 bb       	out	0x11, r24	; 17
	PORTD = 1<<PD2;					 // Enable PD2 pull-up resistor
     34c:	82 bb       	out	0x12, r24	; 18
	sei();
     34e:	78 94       	sei
     350:	08 95       	ret

00000352 <init_interrupts2>:
}
void init_interrupts2(){
	MCUCR |= (1 << ISC11)|(1 << ISC10);  // Rising Edge
     352:	85 b7       	in	r24, 0x35	; 53
     354:	8c 60       	ori	r24, 0x0C	; 12
     356:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT1);				// INT1 Enabled
     358:	8b b7       	in	r24, 0x3b	; 59
     35a:	80 68       	ori	r24, 0x80	; 128
     35c:	8b bf       	out	0x3b, r24	; 59
	DDRD = 1<<PD3;					   // Set PD3 as input (Using for interrupt INT1)
     35e:	88 e0       	ldi	r24, 0x08	; 8
     360:	81 bb       	out	0x11, r24	; 17
	PORTD = 1<<PD3;					  // Enable PD3 pull-up resistor
     362:	82 bb       	out	0x12, r24	; 18
	sei();
     364:	78 94       	sei
     366:	08 95       	ret

00000368 <init_io>:
}
void init_io(){
	// Fast PWM mode - 16bit , Fixed frequency , Non- Inverting mode , TOP = ICR1 = 399
	// Frequency = F_CPU/(N*(1+TOP) =40000 Hz , N = 1
	// Duty cycle set by OCR1A and OCR1B
	TCCR1A = (1 << COM1A1) | (1 << WGM11 | (1<<COM1B1) )  ;
     368:	82 ea       	ldi	r24, 0xA2	; 162
     36a:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS10) ;
     36c:	89 e1       	ldi	r24, 0x19	; 25
     36e:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 399;
     370:	8f e8       	ldi	r24, 0x8F	; 143
     372:	91 e0       	ldi	r25, 0x01	; 1
     374:	97 bd       	out	0x27, r25	; 39
     376:	86 bd       	out	0x26, r24	; 38
	TCNT1L = 0;
     378:	1c bc       	out	0x2c, r1	; 44
	TCNT1H = 0;
     37a:	1d bc       	out	0x2d, r1	; 45
	sendStringUSART("PWM Initialized");
     37c:	83 e7       	ldi	r24, 0x73	; 115
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	0e 94 e6 00 	call	0x1cc	; 0x1cc <sendStringUSART>
     384:	08 95       	ret

00000386 <init_sensors>:
}
void init_sensors(){
	DDRA &= ~(1 << PA1);        // set as inputs
     386:	d1 98       	cbi	0x1a, 1	; 26
	DDRA &= ~(1 << PA2);       //seredinka 3 , 4 pravyj, 5 levyj
     388:	d2 98       	cbi	0x1a, 2	; 26
	DDRA &= ~(1 << PA3);
     38a:	d3 98       	cbi	0x1a, 3	; 26
	DDRA &= ~(1 << PA4);
     38c:	d4 98       	cbi	0x1a, 4	; 26
	DDRA &= ~(1 << PA5);
     38e:	d5 98       	cbi	0x1a, 5	; 26
	DDRA &= ~(1 << PA6);
     390:	d6 98       	cbi	0x1a, 6	; 26
	DDRA &= ~(1 << PA7);
     392:	d7 98       	cbi	0x1a, 7	; 26
     394:	08 95       	ret

00000396 <init_timer2>:
	sendStringUSART("timer 0 was initialized");
}
void init_timer2(){
	// Timer2 CTC mode Frequency = F_CPU/(2*N*(1+OCR2)) = 100 Hz
	// Set to interrupt after
	OCR2 = 78;									   // Set OCR2
     396:	8e e4       	ldi	r24, 0x4E	; 78
     398:	83 bd       	out	0x23, r24	; 35
	TCCR2 |= (1 << WGM21);						  // Set to CTC Mode
     39a:	85 b5       	in	r24, 0x25	; 37
     39c:	88 60       	ori	r24, 0x08	; 8
     39e:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1 << OCIE2);						 //Set interrupt on compare match
     3a0:	89 b7       	in	r24, 0x39	; 57
     3a2:	80 68       	ori	r24, 0x80	; 128
     3a4:	89 bf       	out	0x39, r24	; 57
	TCCR2 |= ( 1<< CS20 |1 << CS21 | 1<< CS22); // set prescaler to 1024 and starts PWM
     3a6:	85 b5       	in	r24, 0x25	; 37
     3a8:	87 60       	ori	r24, 0x07	; 7
     3aa:	85 bd       	out	0x25, r24	; 37
	sei();									   // enable interrupts
     3ac:	78 94       	sei
	sendStringUSART("\n Timer 2 was initialised");
     3ae:	8b e9       	ldi	r24, 0x9B	; 155
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <sendStringUSART>
     3b6:	08 95       	ret

000003b8 <make90R>:
	
}

void make90R(){
     3b8:	cf 92       	push	r12
     3ba:	df 92       	push	r13
     3bc:	ef 92       	push	r14
     3be:	ff 92       	push	r15

	flagB=1;
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	90 93 01 01 	sts	0x0101, r25
     3c8:	80 93 00 01 	sts	0x0100, r24
	while(pulsesBturn < 350){
     3cc:	20 e0       	ldi	r18, 0x00	; 0
     3ce:	30 e0       	ldi	r19, 0x00	; 0
     3d0:	4f ea       	ldi	r20, 0xAF	; 175
     3d2:	53 e4       	ldi	r21, 0x43	; 67
     3d4:	60 91 fc 00 	lds	r22, 0x00FC
     3d8:	70 91 fd 00 	lds	r23, 0x00FD
     3dc:	80 91 fe 00 	lds	r24, 0x00FE
     3e0:	90 91 ff 00 	lds	r25, 0x00FF
     3e4:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__cmpsf2>
     3e8:	88 23       	and	r24, r24
     3ea:	94 f5       	brge	.+100    	; 0x450 <make90R+0x98>
		stopA();
		set_PulsesRef=10;
     3ec:	0f 2e       	mov	r0, r31
     3ee:	c1 2c       	mov	r12, r1
     3f0:	d1 2c       	mov	r13, r1
     3f2:	f0 e2       	ldi	r31, 0x20	; 32
     3f4:	ef 2e       	mov	r14, r31
     3f6:	f1 e4       	ldi	r31, 0x41	; 65
     3f8:	ff 2e       	mov	r15, r31
     3fa:	f0 2d       	mov	r31, r0

void make90R(){

	flagB=1;
	while(pulsesBturn < 350){
		stopA();
     3fc:	0e 94 bd 00 	call	0x17a	; 0x17a <stopA>
		set_PulsesRef=10;
     400:	c0 92 16 01 	sts	0x0116, r12
     404:	d0 92 17 01 	sts	0x0117, r13
     408:	e0 92 18 01 	sts	0x0118, r14
     40c:	f0 92 19 01 	sts	0x0119, r15
		set_PulsesA=0;
     410:	10 92 12 01 	sts	0x0112, r1
     414:	10 92 13 01 	sts	0x0113, r1
     418:	10 92 14 01 	sts	0x0114, r1
     41c:	10 92 15 01 	sts	0x0115, r1
		set_PulsesB=set_PulsesRef;
     420:	c0 92 0e 01 	sts	0x010E, r12
     424:	d0 92 0f 01 	sts	0x010F, r13
     428:	e0 92 10 01 	sts	0x0110, r14
     42c:	f0 92 11 01 	sts	0x0111, r15
}

void make90R(){

	flagB=1;
	while(pulsesBturn < 350){
     430:	20 e0       	ldi	r18, 0x00	; 0
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	4f ea       	ldi	r20, 0xAF	; 175
     436:	53 e4       	ldi	r21, 0x43	; 67
     438:	60 91 fc 00 	lds	r22, 0x00FC
     43c:	70 91 fd 00 	lds	r23, 0x00FD
     440:	80 91 fe 00 	lds	r24, 0x00FE
     444:	90 91 ff 00 	lds	r25, 0x00FF
     448:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__cmpsf2>
     44c:	88 23       	and	r24, r24
     44e:	b4 f2       	brlt	.-84     	; 0x3fc <make90R+0x44>
		stopA();
		set_PulsesRef=10;
		set_PulsesA=0;
		set_PulsesB=set_PulsesRef;
	}
	flagB=0;
     450:	10 92 01 01 	sts	0x0101, r1
     454:	10 92 00 01 	sts	0x0100, r1
	pulsesBturn=0;
     458:	10 92 fc 00 	sts	0x00FC, r1
     45c:	10 92 fd 00 	sts	0x00FD, r1
     460:	10 92 fe 00 	sts	0x00FE, r1
     464:	10 92 ff 00 	sts	0x00FF, r1
	stopAB();
     468:	0e 94 b5 00 	call	0x16a	; 0x16a <stopAB>
	setBothMotorsRpm(0);
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	0e 94 61 01 	call	0x2c2	; 0x2c2 <setBothMotorsRpm>
	//_delay_ms(500);
}
     474:	ff 90       	pop	r15
     476:	ef 90       	pop	r14
     478:	df 90       	pop	r13
     47a:	cf 90       	pop	r12
     47c:	08 95       	ret

0000047e <make90L>:
void make90L(){
     47e:	cf 92       	push	r12
     480:	df 92       	push	r13
     482:	ef 92       	push	r14
     484:	ff 92       	push	r15
	flagA=1;
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	90 93 03 01 	sts	0x0103, r25
     48e:	80 93 02 01 	sts	0x0102, r24
	while(pulsesAturn < 330){
     492:	20 e0       	ldi	r18, 0x00	; 0
     494:	30 e0       	ldi	r19, 0x00	; 0
     496:	45 ea       	ldi	r20, 0xA5	; 165
     498:	53 e4       	ldi	r21, 0x43	; 67
     49a:	60 91 f8 00 	lds	r22, 0x00F8
     49e:	70 91 f9 00 	lds	r23, 0x00F9
     4a2:	80 91 fa 00 	lds	r24, 0x00FA
     4a6:	90 91 fb 00 	lds	r25, 0x00FB
     4aa:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__cmpsf2>
     4ae:	88 23       	and	r24, r24
     4b0:	94 f5       	brge	.+100    	; 0x516 <make90L+0x98>
		stopB();
		set_PulsesRef=10;
     4b2:	0f 2e       	mov	r0, r31
     4b4:	c1 2c       	mov	r12, r1
     4b6:	d1 2c       	mov	r13, r1
     4b8:	f0 e2       	ldi	r31, 0x20	; 32
     4ba:	ef 2e       	mov	r14, r31
     4bc:	f1 e4       	ldi	r31, 0x41	; 65
     4be:	ff 2e       	mov	r15, r31
     4c0:	f0 2d       	mov	r31, r0
	//_delay_ms(500);
}
void make90L(){
	flagA=1;
	while(pulsesAturn < 330){
		stopB();
     4c2:	0e 94 ba 00 	call	0x174	; 0x174 <stopB>
		set_PulsesRef=10;
     4c6:	c0 92 16 01 	sts	0x0116, r12
     4ca:	d0 92 17 01 	sts	0x0117, r13
     4ce:	e0 92 18 01 	sts	0x0118, r14
     4d2:	f0 92 19 01 	sts	0x0119, r15
		set_PulsesB=0;
     4d6:	10 92 0e 01 	sts	0x010E, r1
     4da:	10 92 0f 01 	sts	0x010F, r1
     4de:	10 92 10 01 	sts	0x0110, r1
     4e2:	10 92 11 01 	sts	0x0111, r1
		set_PulsesA=set_PulsesRef;
     4e6:	c0 92 12 01 	sts	0x0112, r12
     4ea:	d0 92 13 01 	sts	0x0113, r13
     4ee:	e0 92 14 01 	sts	0x0114, r14
     4f2:	f0 92 15 01 	sts	0x0115, r15
	setBothMotorsRpm(0);
	//_delay_ms(500);
}
void make90L(){
	flagA=1;
	while(pulsesAturn < 330){
     4f6:	20 e0       	ldi	r18, 0x00	; 0
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	45 ea       	ldi	r20, 0xA5	; 165
     4fc:	53 e4       	ldi	r21, 0x43	; 67
     4fe:	60 91 f8 00 	lds	r22, 0x00F8
     502:	70 91 f9 00 	lds	r23, 0x00F9
     506:	80 91 fa 00 	lds	r24, 0x00FA
     50a:	90 91 fb 00 	lds	r25, 0x00FB
     50e:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__cmpsf2>
     512:	88 23       	and	r24, r24
     514:	b4 f2       	brlt	.-84     	; 0x4c2 <make90L+0x44>
		stopB();
		set_PulsesRef=10;
		set_PulsesB=0;
		set_PulsesA=set_PulsesRef;
	}
	flagA=0;
     516:	10 92 03 01 	sts	0x0103, r1
     51a:	10 92 02 01 	sts	0x0102, r1
	pulsesAturn=0;
     51e:	10 92 f8 00 	sts	0x00F8, r1
     522:	10 92 f9 00 	sts	0x00F9, r1
     526:	10 92 fa 00 	sts	0x00FA, r1
     52a:	10 92 fb 00 	sts	0x00FB, r1
	stopAB();
     52e:	0e 94 b5 00 	call	0x16a	; 0x16a <stopAB>
	setBothMotorsRpm(0);
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	0e 94 61 01 	call	0x2c2	; 0x2c2 <setBothMotorsRpm>
}
     53a:	ff 90       	pop	r15
     53c:	ef 90       	pop	r14
     53e:	df 90       	pop	r13
     540:	cf 90       	pop	r12
     542:	08 95       	ret

00000544 <motorsPID>:
void motorsPID (){
     544:	2f 92       	push	r2
     546:	3f 92       	push	r3
     548:	4f 92       	push	r4
     54a:	5f 92       	push	r5
     54c:	6f 92       	push	r6
     54e:	7f 92       	push	r7
     550:	8f 92       	push	r8
     552:	9f 92       	push	r9
     554:	af 92       	push	r10
     556:	bf 92       	push	r11
     558:	cf 92       	push	r12
     55a:	df 92       	push	r13
     55c:	ef 92       	push	r14
     55e:	ff 92       	push	r15
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	00 d0       	rcall	.+0      	; 0x566 <motorsPID+0x22>
     566:	00 d0       	rcall	.+0      	; 0x568 <motorsPID+0x24>
     568:	cd b7       	in	r28, 0x3d	; 61
     56a:	de b7       	in	r29, 0x3e	; 62
	//int k=OCR1A;
	//int b=OCR1B;
	static int16_t oca=0;
	static int16_t ocb=0;
	errorA = set_PulsesA - feedback_PulsesA;
     56c:	20 91 4e 01 	lds	r18, 0x014E
     570:	30 91 4f 01 	lds	r19, 0x014F
     574:	40 91 50 01 	lds	r20, 0x0150
     578:	50 91 51 01 	lds	r21, 0x0151
     57c:	60 91 12 01 	lds	r22, 0x0112
     580:	70 91 13 01 	lds	r23, 0x0113
     584:	80 91 14 01 	lds	r24, 0x0114
     588:	90 91 15 01 	lds	r25, 0x0115
     58c:	0e 94 b7 0c 	call	0x196e	; 0x196e <__subsf3>
     590:	4b 01       	movw	r8, r22
     592:	5c 01       	movw	r10, r24
     594:	60 93 3f 01 	sts	0x013F, r22
     598:	70 93 40 01 	sts	0x0140, r23
     59c:	80 93 41 01 	sts	0x0141, r24
     5a0:	90 93 42 01 	sts	0x0142, r25
	errorB = set_PulsesB - feedback_PulsesB;
     5a4:	20 91 52 01 	lds	r18, 0x0152
     5a8:	30 91 53 01 	lds	r19, 0x0153
     5ac:	40 91 54 01 	lds	r20, 0x0154
     5b0:	50 91 55 01 	lds	r21, 0x0155
     5b4:	60 91 0e 01 	lds	r22, 0x010E
     5b8:	70 91 0f 01 	lds	r23, 0x010F
     5bc:	80 91 10 01 	lds	r24, 0x0110
     5c0:	90 91 11 01 	lds	r25, 0x0111
     5c4:	0e 94 b7 0c 	call	0x196e	; 0x196e <__subsf3>
     5c8:	6b 01       	movw	r12, r22
     5ca:	7c 01       	movw	r14, r24
     5cc:	60 93 36 01 	sts	0x0136, r22
     5d0:	70 93 37 01 	sts	0x0137, r23
     5d4:	80 93 38 01 	sts	0x0138, r24
     5d8:	90 93 39 01 	sts	0x0139, r25
	
	oca+=errorA*P_GAIN;
     5dc:	20 90 64 00 	lds	r2, 0x0064
     5e0:	30 90 65 00 	lds	r3, 0x0065
     5e4:	40 90 66 00 	lds	r4, 0x0066
     5e8:	50 90 67 00 	lds	r5, 0x0067
     5ec:	60 91 f2 00 	lds	r22, 0x00F2
     5f0:	70 91 f3 00 	lds	r23, 0x00F3
     5f4:	88 27       	eor	r24, r24
     5f6:	77 fd       	sbrc	r23, 7
     5f8:	80 95       	com	r24
     5fa:	98 2f       	mov	r25, r24
     5fc:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatsisf>
     600:	69 83       	std	Y+1, r22	; 0x01
     602:	7a 83       	std	Y+2, r23	; 0x02
     604:	8b 83       	std	Y+3, r24	; 0x03
     606:	9c 83       	std	Y+4, r25	; 0x04
     608:	a2 01       	movw	r20, r4
     60a:	91 01       	movw	r18, r2
     60c:	c5 01       	movw	r24, r10
     60e:	b4 01       	movw	r22, r8
     610:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <__mulsf3>
     614:	9b 01       	movw	r18, r22
     616:	ac 01       	movw	r20, r24
     618:	69 81       	ldd	r22, Y+1	; 0x01
     61a:	7a 81       	ldd	r23, Y+2	; 0x02
     61c:	8b 81       	ldd	r24, Y+3	; 0x03
     61e:	9c 81       	ldd	r25, Y+4	; 0x04
     620:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__addsf3>
     624:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__fixsfsi>
     628:	3b 01       	movw	r6, r22
     62a:	70 93 f3 00 	sts	0x00F3, r23
     62e:	60 93 f2 00 	sts	0x00F2, r22
	ocb+=errorB*P_GAIN;
     632:	60 91 f0 00 	lds	r22, 0x00F0
     636:	70 91 f1 00 	lds	r23, 0x00F1
     63a:	88 27       	eor	r24, r24
     63c:	77 fd       	sbrc	r23, 7
     63e:	80 95       	com	r24
     640:	98 2f       	mov	r25, r24
     642:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatsisf>
     646:	4b 01       	movw	r8, r22
     648:	5c 01       	movw	r10, r24
     64a:	a2 01       	movw	r20, r4
     64c:	91 01       	movw	r18, r2
     64e:	c7 01       	movw	r24, r14
     650:	b6 01       	movw	r22, r12
     652:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <__mulsf3>
     656:	9b 01       	movw	r18, r22
     658:	ac 01       	movw	r20, r24
     65a:	c5 01       	movw	r24, r10
     65c:	b4 01       	movw	r22, r8
     65e:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__addsf3>
     662:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__fixsfsi>
     666:	9b 01       	movw	r18, r22
     668:	70 93 f1 00 	sts	0x00F1, r23
     66c:	60 93 f0 00 	sts	0x00F0, r22
	// stopA();
	
	
	if (oca<0)
     670:	77 20       	and	r7, r7
     672:	2c f4       	brge	.+10     	; 0x67e <motorsPID+0x13a>
	{
		oca=0;
     674:	10 92 f3 00 	sts	0x00F3, r1
     678:	10 92 f2 00 	sts	0x00F2, r1
     67c:	0b c0       	rjmp	.+22     	; 0x694 <motorsPID+0x150>
	}
	else if(oca>399)
     67e:	80 e9       	ldi	r24, 0x90	; 144
     680:	68 16       	cp	r6, r24
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	78 06       	cpc	r7, r24
     686:	34 f0       	brlt	.+12     	; 0x694 <motorsPID+0x150>
	{
		oca=399;
     688:	8f e8       	ldi	r24, 0x8F	; 143
     68a:	91 e0       	ldi	r25, 0x01	; 1
     68c:	90 93 f3 00 	sts	0x00F3, r25
     690:	80 93 f2 00 	sts	0x00F2, r24
	}
	
	if (ocb<0)
     694:	33 23       	and	r19, r19
     696:	2c f4       	brge	.+10     	; 0x6a2 <motorsPID+0x15e>
	{
		ocb=0;
     698:	10 92 f1 00 	sts	0x00F1, r1
     69c:	10 92 f0 00 	sts	0x00F0, r1
     6a0:	09 c0       	rjmp	.+18     	; 0x6b4 <motorsPID+0x170>
	}
	else if(ocb>399)
     6a2:	20 39       	cpi	r18, 0x90	; 144
     6a4:	31 40       	sbci	r19, 0x01	; 1
     6a6:	34 f0       	brlt	.+12     	; 0x6b4 <motorsPID+0x170>
	{
		ocb=399;
     6a8:	8f e8       	ldi	r24, 0x8F	; 143
     6aa:	91 e0       	ldi	r25, 0x01	; 1
     6ac:	90 93 f1 00 	sts	0x00F1, r25
     6b0:	80 93 f0 00 	sts	0x00F0, r24
	}
	
	OCR1A=oca;
     6b4:	80 91 f2 00 	lds	r24, 0x00F2
     6b8:	90 91 f3 00 	lds	r25, 0x00F3
     6bc:	9b bd       	out	0x2b, r25	; 43
     6be:	8a bd       	out	0x2a, r24	; 42
	OCR1B=ocb;
     6c0:	80 91 f0 00 	lds	r24, 0x00F0
     6c4:	90 91 f1 00 	lds	r25, 0x00F1
     6c8:	99 bd       	out	0x29, r25	; 41
     6ca:	88 bd       	out	0x28, r24	; 40
	if (errorB<0)
     6cc:	20 e0       	ldi	r18, 0x00	; 0
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	a9 01       	movw	r20, r18
     6d2:	60 91 36 01 	lds	r22, 0x0136
     6d6:	70 91 37 01 	lds	r23, 0x0137
     6da:	80 91 38 01 	lds	r24, 0x0138
     6de:	90 91 39 01 	lds	r25, 0x0139
     6e2:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__cmpsf2>
     6e6:	88 23       	and	r24, r24
     6e8:	3c f4       	brge	.+14     	; 0x6f8 <motorsPID+0x1b4>
	{
		stopB();
     6ea:	0e 94 ba 00 	call	0x174	; 0x174 <stopB>
		OCR1B=399;
     6ee:	8f e8       	ldi	r24, 0x8F	; 143
     6f0:	91 e0       	ldi	r25, 0x01	; 1
     6f2:	99 bd       	out	0x29, r25	; 41
     6f4:	88 bd       	out	0x28, r24	; 40
     6f6:	02 c0       	rjmp	.+4      	; 0x6fc <motorsPID+0x1b8>
		
		}else {
		forwardB();
     6f8:	0e 94 c0 00 	call	0x180	; 0x180 <forwardB>
	}

	if (errorA<0)
     6fc:	20 e0       	ldi	r18, 0x00	; 0
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	a9 01       	movw	r20, r18
     702:	60 91 3f 01 	lds	r22, 0x013F
     706:	70 91 40 01 	lds	r23, 0x0140
     70a:	80 91 41 01 	lds	r24, 0x0141
     70e:	90 91 42 01 	lds	r25, 0x0142
     712:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__cmpsf2>
     716:	88 23       	and	r24, r24
     718:	3c f4       	brge	.+14     	; 0x728 <motorsPID+0x1e4>
	{
		stopA();
     71a:	0e 94 bd 00 	call	0x17a	; 0x17a <stopA>
		OCR1A=399;
     71e:	8f e8       	ldi	r24, 0x8F	; 143
     720:	91 e0       	ldi	r25, 0x01	; 1
     722:	9b bd       	out	0x2b, r25	; 43
     724:	8a bd       	out	0x2a, r24	; 42
     726:	02 c0       	rjmp	.+4      	; 0x72c <motorsPID+0x1e8>
		
		}else {
		forwardA();
     728:	0e 94 c3 00 	call	0x186	; 0x186 <forwardA>
	}

}
     72c:	0f 90       	pop	r0
     72e:	0f 90       	pop	r0
     730:	0f 90       	pop	r0
     732:	0f 90       	pop	r0
     734:	df 91       	pop	r29
     736:	cf 91       	pop	r28
     738:	ff 90       	pop	r15
     73a:	ef 90       	pop	r14
     73c:	df 90       	pop	r13
     73e:	cf 90       	pop	r12
     740:	bf 90       	pop	r11
     742:	af 90       	pop	r10
     744:	9f 90       	pop	r9
     746:	8f 90       	pop	r8
     748:	7f 90       	pop	r7
     74a:	6f 90       	pop	r6
     74c:	5f 90       	pop	r5
     74e:	4f 90       	pop	r4
     750:	3f 90       	pop	r3
     752:	2f 90       	pop	r2
     754:	08 95       	ret

00000756 <readSensors>:


double readSensors (){
     756:	2f 92       	push	r2
     758:	3f 92       	push	r3
     75a:	4f 92       	push	r4
     75c:	5f 92       	push	r5
     75e:	6f 92       	push	r6
     760:	7f 92       	push	r7
     762:	8f 92       	push	r8
     764:	9f 92       	push	r9
     766:	af 92       	push	r10
     768:	bf 92       	push	r11
     76a:	cf 92       	push	r12
     76c:	df 92       	push	r13
     76e:	ef 92       	push	r14
     770:	ff 92       	push	r15
     772:	0f 93       	push	r16
     774:	1f 93       	push	r17
     776:	cf 93       	push	r28
     778:	df 93       	push	r29
	
	int sensor1 = !((PINA & (1<<PA1))/2);
     77a:	29 b3       	in	r18, 0x19	; 25
	int sensor2 = !((PINA & (1<<PA2))/4);
     77c:	89 b3       	in	r24, 0x19	; 25
     77e:	84 70       	andi	r24, 0x04	; 4
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	03 96       	adiw	r24, 0x03	; 3
     784:	41 e0       	ldi	r20, 0x01	; 1
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	07 97       	sbiw	r24, 0x07	; 7
     78a:	08 f0       	brcs	.+2      	; 0x78e <readSensors+0x38>
     78c:	40 e0       	ldi	r20, 0x00	; 0
     78e:	84 2e       	mov	r8, r20
     790:	93 2e       	mov	r9, r19
	int sensor3 = !((PINA & (1<<PA3))/8);
     792:	89 b3       	in	r24, 0x19	; 25
     794:	88 70       	andi	r24, 0x08	; 8
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	07 96       	adiw	r24, 0x07	; 7
     79a:	41 e0       	ldi	r20, 0x01	; 1
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	0f 97       	sbiw	r24, 0x0f	; 15
     7a0:	08 f0       	brcs	.+2      	; 0x7a4 <readSensors+0x4e>
     7a2:	40 e0       	ldi	r20, 0x00	; 0
     7a4:	c4 2e       	mov	r12, r20
     7a6:	d3 2e       	mov	r13, r19
	int sensor4 = !((PINA & (1<<PA4))/16);
     7a8:	89 b3       	in	r24, 0x19	; 25
     7aa:	80 71       	andi	r24, 0x10	; 16
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	0f 96       	adiw	r24, 0x0f	; 15
     7b0:	41 e0       	ldi	r20, 0x01	; 1
     7b2:	30 e0       	ldi	r19, 0x00	; 0
     7b4:	4f 97       	sbiw	r24, 0x1f	; 31
     7b6:	08 f0       	brcs	.+2      	; 0x7ba <readSensors+0x64>
     7b8:	40 e0       	ldi	r20, 0x00	; 0
     7ba:	24 2e       	mov	r2, r20
     7bc:	33 2e       	mov	r3, r19
	int sensor5 = !((PINA & (1<<PA5))/32);
     7be:	89 b3       	in	r24, 0x19	; 25
     7c0:	80 72       	andi	r24, 0x20	; 32
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	4f 96       	adiw	r24, 0x1f	; 31
     7c6:	41 e0       	ldi	r20, 0x01	; 1
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	cf 97       	sbiw	r24, 0x3f	; 63
     7cc:	08 f0       	brcs	.+2      	; 0x7d0 <readSensors+0x7a>
     7ce:	40 e0       	ldi	r20, 0x00	; 0
     7d0:	e4 2e       	mov	r14, r20
     7d2:	f3 2e       	mov	r15, r19
	int sensor6 = !((PINA & (1<<PA6))/64);
     7d4:	89 b3       	in	r24, 0x19	; 25
     7d6:	80 74       	andi	r24, 0x40	; 64
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	cf 96       	adiw	r24, 0x3f	; 63
     7dc:	41 e0       	ldi	r20, 0x01	; 1
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	8f 37       	cpi	r24, 0x7F	; 127
     7e2:	91 05       	cpc	r25, r1
     7e4:	08 f0       	brcs	.+2      	; 0x7e8 <readSensors+0x92>
     7e6:	40 e0       	ldi	r20, 0x00	; 0
     7e8:	04 2f       	mov	r16, r20
     7ea:	13 2f       	mov	r17, r19
	int sensor7 = !((PINA & (1<<PA7))/128);
     7ec:	89 b3       	in	r24, 0x19	; 25
     7ee:	80 78       	andi	r24, 0x80	; 128
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	81 58       	subi	r24, 0x81	; 129
     7f4:	9f 4f       	sbci	r25, 0xFF	; 255
     7f6:	41 e0       	ldi	r20, 0x01	; 1
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	8f 3f       	cpi	r24, 0xFF	; 255
     7fc:	91 05       	cpc	r25, r1
     7fe:	08 f0       	brcs	.+2      	; 0x802 <readSensors+0xac>
     800:	40 e0       	ldi	r20, 0x00	; 0
     802:	c4 2f       	mov	r28, r20
     804:	d3 2f       	mov	r29, r19
	
	double sum=  (sensor1*1) + (sensor2*2) + (sensor3*3) + (sensor4*4) + (sensor5*5) + (sensor6*6) + (sensor7*7);
     806:	54 01       	movw	r10, r8
     808:	aa 0c       	add	r10, r10
     80a:	bb 1c       	adc	r11, r11
}


double readSensors (){
	
	int sensor1 = !((PINA & (1<<PA1))/2);
     80c:	22 70       	andi	r18, 0x02	; 2
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	2f 5f       	subi	r18, 0xFF	; 255
     812:	3f 4f       	sbci	r19, 0xFF	; 255
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	23 30       	cpi	r18, 0x03	; 3
     81a:	31 05       	cpc	r19, r1
     81c:	10 f0       	brcs	.+4      	; 0x822 <readSensors+0xcc>
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	90 e0       	ldi	r25, 0x00	; 0
	int sensor4 = !((PINA & (1<<PA4))/16);
	int sensor5 = !((PINA & (1<<PA5))/32);
	int sensor6 = !((PINA & (1<<PA6))/64);
	int sensor7 = !((PINA & (1<<PA7))/128);
	
	double sum=  (sensor1*1) + (sensor2*2) + (sensor3*3) + (sensor4*4) + (sensor5*5) + (sensor6*6) + (sensor7*7);
     822:	a8 0e       	add	r10, r24
     824:	b9 1e       	adc	r11, r25
     826:	b6 01       	movw	r22, r12
     828:	66 0f       	add	r22, r22
     82a:	77 1f       	adc	r23, r23
     82c:	6c 0d       	add	r22, r12
     82e:	7d 1d       	adc	r23, r13
     830:	6a 0d       	add	r22, r10
     832:	7b 1d       	adc	r23, r11
     834:	c1 01       	movw	r24, r2
     836:	88 0f       	add	r24, r24
     838:	99 1f       	adc	r25, r25
     83a:	88 0f       	add	r24, r24
     83c:	99 1f       	adc	r25, r25
     83e:	68 0f       	add	r22, r24
     840:	79 1f       	adc	r23, r25
     842:	c7 01       	movw	r24, r14
     844:	88 0f       	add	r24, r24
     846:	99 1f       	adc	r25, r25
     848:	88 0f       	add	r24, r24
     84a:	99 1f       	adc	r25, r25
     84c:	8e 0d       	add	r24, r14
     84e:	9f 1d       	adc	r25, r15
     850:	68 0f       	add	r22, r24
     852:	79 1f       	adc	r23, r25
     854:	c8 01       	movw	r24, r16
     856:	88 0f       	add	r24, r24
     858:	99 1f       	adc	r25, r25
     85a:	80 0f       	add	r24, r16
     85c:	91 1f       	adc	r25, r17
     85e:	88 0f       	add	r24, r24
     860:	99 1f       	adc	r25, r25
     862:	68 0f       	add	r22, r24
     864:	79 1f       	adc	r23, r25
     866:	ce 01       	movw	r24, r28
     868:	88 0f       	add	r24, r24
     86a:	99 1f       	adc	r25, r25
     86c:	88 0f       	add	r24, r24
     86e:	99 1f       	adc	r25, r25
     870:	88 0f       	add	r24, r24
     872:	99 1f       	adc	r25, r25
     874:	8c 1b       	sub	r24, r28
     876:	9d 0b       	sbc	r25, r29
     878:	68 0f       	add	r22, r24
     87a:	79 1f       	adc	r23, r25
     87c:	88 27       	eor	r24, r24
     87e:	77 fd       	sbrc	r23, 7
     880:	80 95       	com	r24
     882:	98 2f       	mov	r25, r24
     884:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatsisf>
     888:	2b 01       	movw	r4, r22
     88a:	3c 01       	movw	r6, r24
	sum=sum/((sensor1) + (sensor2) + (sensor3) + (sensor4) + (sensor5) + (sensor6) + (sensor7));
     88c:	b5 01       	movw	r22, r10
     88e:	68 19       	sub	r22, r8
     890:	79 09       	sbc	r23, r9
     892:	6c 0d       	add	r22, r12
     894:	7d 1d       	adc	r23, r13
     896:	62 0d       	add	r22, r2
     898:	73 1d       	adc	r23, r3
     89a:	6e 0d       	add	r22, r14
     89c:	7f 1d       	adc	r23, r15
     89e:	60 0f       	add	r22, r16
     8a0:	71 1f       	adc	r23, r17
     8a2:	6c 0f       	add	r22, r28
     8a4:	7d 1f       	adc	r23, r29
     8a6:	88 27       	eor	r24, r24
     8a8:	77 fd       	sbrc	r23, 7
     8aa:	80 95       	com	r24
     8ac:	98 2f       	mov	r25, r24
     8ae:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatsisf>
     8b2:	9b 01       	movw	r18, r22
     8b4:	ac 01       	movw	r20, r24
     8b6:	c3 01       	movw	r24, r6
     8b8:	b2 01       	movw	r22, r4
     8ba:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <__divsf3>
	return sum;
}
     8be:	df 91       	pop	r29
     8c0:	cf 91       	pop	r28
     8c2:	1f 91       	pop	r17
     8c4:	0f 91       	pop	r16
     8c6:	ff 90       	pop	r15
     8c8:	ef 90       	pop	r14
     8ca:	df 90       	pop	r13
     8cc:	cf 90       	pop	r12
     8ce:	bf 90       	pop	r11
     8d0:	af 90       	pop	r10
     8d2:	9f 90       	pop	r9
     8d4:	8f 90       	pop	r8
     8d6:	7f 90       	pop	r7
     8d8:	6f 90       	pop	r6
     8da:	5f 90       	pop	r5
     8dc:	4f 90       	pop	r4
     8de:	3f 90       	pop	r3
     8e0:	2f 90       	pop	r2
     8e2:	08 95       	ret

000008e4 <sensPID>:

//********************************//
float sensPID(double cur_value,int req_value)
{
     8e4:	4f 92       	push	r4
     8e6:	5f 92       	push	r5
     8e8:	6f 92       	push	r6
     8ea:	7f 92       	push	r7
     8ec:	8f 92       	push	r8
     8ee:	9f 92       	push	r9
     8f0:	af 92       	push	r10
     8f2:	bf 92       	push	r11
     8f4:	cf 92       	push	r12
     8f6:	df 92       	push	r13
     8f8:	ef 92       	push	r14
     8fa:	ff 92       	push	r15
	
	float pid;
	double errorSens;

	errorSens=cur_value-4;
     8fc:	20 e0       	ldi	r18, 0x00	; 0
     8fe:	30 e0       	ldi	r19, 0x00	; 0
     900:	40 e8       	ldi	r20, 0x80	; 128
     902:	50 e4       	ldi	r21, 0x40	; 64
     904:	0e 94 b7 0c 	call	0x196e	; 0x196e <__subsf3>
     908:	4b 01       	movw	r8, r22
     90a:	5c 01       	movw	r10, r24
	pid = (pGain * errorSens)  + (iGain * eInteg) + (dGain * (errorSens - ePrev));
     90c:	60 91 08 01 	lds	r22, 0x0108
     910:	70 91 09 01 	lds	r23, 0x0109
     914:	80 91 0a 01 	lds	r24, 0x010A
     918:	90 91 0b 01 	lds	r25, 0x010B
     91c:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatsisf>
     920:	2b 01       	movw	r4, r22
     922:	3c 01       	movw	r6, r24
     924:	20 91 60 00 	lds	r18, 0x0060
     928:	30 91 61 00 	lds	r19, 0x0061
     92c:	40 91 62 00 	lds	r20, 0x0062
     930:	50 91 63 00 	lds	r21, 0x0063
     934:	c5 01       	movw	r24, r10
     936:	b4 01       	movw	r22, r8
     938:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <__mulsf3>
     93c:	6b 01       	movw	r12, r22
     93e:	7c 01       	movw	r14, r24
     940:	20 91 22 01 	lds	r18, 0x0122
     944:	30 91 23 01 	lds	r19, 0x0123
     948:	40 91 24 01 	lds	r20, 0x0124
     94c:	50 91 25 01 	lds	r21, 0x0125
     950:	c3 01       	movw	r24, r6
     952:	b2 01       	movw	r22, r4
     954:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <__mulsf3>
     958:	9b 01       	movw	r18, r22
     95a:	ac 01       	movw	r20, r24
     95c:	c7 01       	movw	r24, r14
     95e:	b6 01       	movw	r22, r12
     960:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__addsf3>
     964:	6b 01       	movw	r12, r22
     966:	7c 01       	movw	r14, r24
     968:	60 91 04 01 	lds	r22, 0x0104
     96c:	70 91 05 01 	lds	r23, 0x0105
     970:	80 91 06 01 	lds	r24, 0x0106
     974:	90 91 07 01 	lds	r25, 0x0107
     978:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatsisf>
     97c:	9b 01       	movw	r18, r22
     97e:	ac 01       	movw	r20, r24
     980:	c5 01       	movw	r24, r10
     982:	b4 01       	movw	r22, r8
     984:	0e 94 b7 0c 	call	0x196e	; 0x196e <__subsf3>
     988:	20 91 1e 01 	lds	r18, 0x011E
     98c:	30 91 1f 01 	lds	r19, 0x011F
     990:	40 91 20 01 	lds	r20, 0x0120
     994:	50 91 21 01 	lds	r21, 0x0121
     998:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <__mulsf3>
     99c:	9b 01       	movw	r18, r22
     99e:	ac 01       	movw	r20, r24
     9a0:	c7 01       	movw	r24, r14
     9a2:	b6 01       	movw	r22, r12
     9a4:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__addsf3>
     9a8:	6b 01       	movw	r12, r22
     9aa:	7c 01       	movw	r14, r24

	eInteg += errorSens;                  // integral is simply a summation over time
     9ac:	a3 01       	movw	r20, r6
     9ae:	92 01       	movw	r18, r4
     9b0:	c5 01       	movw	r24, r10
     9b2:	b4 01       	movw	r22, r8
     9b4:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__addsf3>
     9b8:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__fixsfsi>
     9bc:	60 93 08 01 	sts	0x0108, r22
     9c0:	70 93 09 01 	sts	0x0109, r23
     9c4:	80 93 0a 01 	sts	0x010A, r24
     9c8:	90 93 0b 01 	sts	0x010B, r25
	ePrev = errorSens;                    // save previous for derivative
     9cc:	c5 01       	movw	r24, r10
     9ce:	b4 01       	movw	r22, r8
     9d0:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__fixsfsi>
     9d4:	60 93 04 01 	sts	0x0104, r22
     9d8:	70 93 05 01 	sts	0x0105, r23
     9dc:	80 93 06 01 	sts	0x0106, r24
     9e0:	90 93 07 01 	sts	0x0107, r25

	
	if (pid<-25){
     9e4:	20 e0       	ldi	r18, 0x00	; 0
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	48 ec       	ldi	r20, 0xC8	; 200
     9ea:	51 ec       	ldi	r21, 0xC1	; 193
     9ec:	c7 01       	movw	r24, r14
     9ee:	b6 01       	movw	r22, r12
     9f0:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__cmpsf2>
     9f4:	88 23       	and	r24, r24
     9f6:	b4 f0       	brlt	.+44     	; 0xa24 <sensPID+0x140>
		pid=-25;
		}else if (pid>25){
     9f8:	20 e0       	ldi	r18, 0x00	; 0
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	48 ec       	ldi	r20, 0xC8	; 200
     9fe:	51 e4       	ldi	r21, 0x41	; 65
     a00:	c7 01       	movw	r24, r14
     a02:	b6 01       	movw	r22, r12
     a04:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__gesf2>
     a08:	18 16       	cp	r1, r24
     a0a:	0c f4       	brge	.+2      	; 0xa0e <sensPID+0x12a>
     a0c:	44 c0       	rjmp	.+136    	; 0xa96 <sensPID+0x1b2>
		pid=25;
	}
	
	if(pid<0){
     a0e:	20 e0       	ldi	r18, 0x00	; 0
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	a9 01       	movw	r20, r18
     a14:	c7 01       	movw	r24, r14
     a16:	b6 01       	movw	r22, r12
     a18:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__cmpsf2>
     a1c:	88 23       	and	r24, r24
     a1e:	0c f0       	brlt	.+2      	; 0xa22 <sensPID+0x13e>
     a20:	42 c0       	rjmp	.+132    	; 0xaa6 <sensPID+0x1c2>
     a22:	08 c0       	rjmp	.+16     	; 0xa34 <sensPID+0x150>
	eInteg += errorSens;                  // integral is simply a summation over time
	ePrev = errorSens;                    // save previous for derivative

	
	if (pid<-25){
		pid=-25;
     a24:	0f 2e       	mov	r0, r31
     a26:	c1 2c       	mov	r12, r1
     a28:	d1 2c       	mov	r13, r1
     a2a:	f8 ec       	ldi	r31, 0xC8	; 200
     a2c:	ef 2e       	mov	r14, r31
     a2e:	f1 ec       	ldi	r31, 0xC1	; 193
     a30:	ff 2e       	mov	r15, r31
     a32:	f0 2d       	mov	r31, r0
		}else if (pid>25){
		pid=25;
	}
	
	if(pid<0){
		set_PulsesA=set_PulsesRef;
     a34:	80 90 16 01 	lds	r8, 0x0116
     a38:	90 90 17 01 	lds	r9, 0x0117
     a3c:	a0 90 18 01 	lds	r10, 0x0118
     a40:	b0 90 19 01 	lds	r11, 0x0119
     a44:	80 92 12 01 	sts	0x0112, r8
     a48:	90 92 13 01 	sts	0x0113, r9
     a4c:	a0 92 14 01 	sts	0x0114, r10
     a50:	b0 92 15 01 	sts	0x0115, r11
		set_PulsesB=set_PulsesRef-(abs(pid));
     a54:	c7 01       	movw	r24, r14
     a56:	b6 01       	movw	r22, r12
     a58:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__fixsfsi>
     a5c:	9b 01       	movw	r18, r22
     a5e:	77 23       	and	r23, r23
     a60:	24 f4       	brge	.+8      	; 0xa6a <sensPID+0x186>
     a62:	22 27       	eor	r18, r18
     a64:	33 27       	eor	r19, r19
     a66:	26 1b       	sub	r18, r22
     a68:	37 0b       	sbc	r19, r23
     a6a:	b9 01       	movw	r22, r18
     a6c:	88 27       	eor	r24, r24
     a6e:	77 fd       	sbrc	r23, 7
     a70:	80 95       	com	r24
     a72:	98 2f       	mov	r25, r24
     a74:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatsisf>
     a78:	9b 01       	movw	r18, r22
     a7a:	ac 01       	movw	r20, r24
     a7c:	c5 01       	movw	r24, r10
     a7e:	b4 01       	movw	r22, r8
     a80:	0e 94 b7 0c 	call	0x196e	; 0x196e <__subsf3>
     a84:	60 93 0e 01 	sts	0x010E, r22
     a88:	70 93 0f 01 	sts	0x010F, r23
     a8c:	80 93 10 01 	sts	0x0110, r24
     a90:	90 93 11 01 	sts	0x0111, r25
     a94:	38 c0       	rjmp	.+112    	; 0xb06 <sensPID+0x222>

	
	if (pid<-25){
		pid=-25;
		}else if (pid>25){
		pid=25;
     a96:	0f 2e       	mov	r0, r31
     a98:	c1 2c       	mov	r12, r1
     a9a:	d1 2c       	mov	r13, r1
     a9c:	f8 ec       	ldi	r31, 0xC8	; 200
     a9e:	ef 2e       	mov	r14, r31
     aa0:	f1 e4       	ldi	r31, 0x41	; 65
     aa2:	ff 2e       	mov	r15, r31
     aa4:	f0 2d       	mov	r31, r0
	if(pid<0){
		set_PulsesA=set_PulsesRef;
		set_PulsesB=set_PulsesRef-(abs(pid));
	}
	else{
		set_PulsesB=set_PulsesRef;
     aa6:	80 90 16 01 	lds	r8, 0x0116
     aaa:	90 90 17 01 	lds	r9, 0x0117
     aae:	a0 90 18 01 	lds	r10, 0x0118
     ab2:	b0 90 19 01 	lds	r11, 0x0119
     ab6:	80 92 0e 01 	sts	0x010E, r8
     aba:	90 92 0f 01 	sts	0x010F, r9
     abe:	a0 92 10 01 	sts	0x0110, r10
     ac2:	b0 92 11 01 	sts	0x0111, r11
		set_PulsesA=set_PulsesRef-(abs(pid));
     ac6:	c7 01       	movw	r24, r14
     ac8:	b6 01       	movw	r22, r12
     aca:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__fixsfsi>
     ace:	9b 01       	movw	r18, r22
     ad0:	77 23       	and	r23, r23
     ad2:	24 f4       	brge	.+8      	; 0xadc <sensPID+0x1f8>
     ad4:	22 27       	eor	r18, r18
     ad6:	33 27       	eor	r19, r19
     ad8:	26 1b       	sub	r18, r22
     ada:	37 0b       	sbc	r19, r23
     adc:	b9 01       	movw	r22, r18
     ade:	88 27       	eor	r24, r24
     ae0:	77 fd       	sbrc	r23, 7
     ae2:	80 95       	com	r24
     ae4:	98 2f       	mov	r25, r24
     ae6:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatsisf>
     aea:	9b 01       	movw	r18, r22
     aec:	ac 01       	movw	r20, r24
     aee:	c5 01       	movw	r24, r10
     af0:	b4 01       	movw	r22, r8
     af2:	0e 94 b7 0c 	call	0x196e	; 0x196e <__subsf3>
     af6:	60 93 12 01 	sts	0x0112, r22
     afa:	70 93 13 01 	sts	0x0113, r23
     afe:	80 93 14 01 	sts	0x0114, r24
     b02:	90 93 15 01 	sts	0x0115, r25
	}
	return pid;
}
     b06:	c7 01       	movw	r24, r14
     b08:	b6 01       	movw	r22, r12
     b0a:	ff 90       	pop	r15
     b0c:	ef 90       	pop	r14
     b0e:	df 90       	pop	r13
     b10:	cf 90       	pop	r12
     b12:	bf 90       	pop	r11
     b14:	af 90       	pop	r10
     b16:	9f 90       	pop	r9
     b18:	8f 90       	pop	r8
     b1a:	7f 90       	pop	r7
     b1c:	6f 90       	pop	r6
     b1e:	5f 90       	pop	r5
     b20:	4f 90       	pop	r4
     b22:	08 95       	ret

00000b24 <followLine>:

void followLine(){
	
	s=readSensors();
     b24:	0e 94 ab 03 	call	0x756	; 0x756 <readSensors>
     b28:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__fixsfsi>
     b2c:	70 93 49 01 	sts	0x0149, r23
     b30:	60 93 48 01 	sts	0x0148, r22
	sensPID(s,0);
     b34:	88 27       	eor	r24, r24
     b36:	77 fd       	sbrc	r23, 7
     b38:	80 95       	com	r24
     b3a:	98 2f       	mov	r25, r24
     b3c:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatsisf>
     b40:	40 e0       	ldi	r20, 0x00	; 0
     b42:	50 e0       	ldi	r21, 0x00	; 0
     b44:	0e 94 72 04 	call	0x8e4	; 0x8e4 <sensPID>
     b48:	08 95       	ret

00000b4a <__vector_4>:
void continueForward(){
	setBothMotorsRpm(set_PulsesRef);
	//motorsPID();
	
}
ISR (TIMER2_COMP_vect){
     b4a:	1f 92       	push	r1
     b4c:	0f 92       	push	r0
     b4e:	0f b6       	in	r0, 0x3f	; 63
     b50:	0f 92       	push	r0
     b52:	11 24       	eor	r1, r1
     b54:	2f 93       	push	r18
     b56:	3f 93       	push	r19
     b58:	4f 93       	push	r20
     b5a:	5f 93       	push	r21
     b5c:	6f 93       	push	r22
     b5e:	7f 93       	push	r23
     b60:	8f 93       	push	r24
     b62:	9f 93       	push	r25
     b64:	af 93       	push	r26
     b66:	bf 93       	push	r27
     b68:	ef 93       	push	r30
     b6a:	ff 93       	push	r31
	
	TCNT2=0;  //reset timer
     b6c:	14 bc       	out	0x24, r1	; 36
	c++;    // count up
     b6e:	80 91 0c 01 	lds	r24, 0x010C
     b72:	90 91 0d 01 	lds	r25, 0x010D
     b76:	01 96       	adiw	r24, 0x01	; 1
     b78:	90 93 0d 01 	sts	0x010D, r25
     b7c:	80 93 0c 01 	sts	0x010C, r24
	//

	// reset the countUp value
	if( 3 == c){
     b80:	03 97       	sbiw	r24, 0x03	; 3
     b82:	09 f0       	breq	.+2      	; 0xb86 <__vector_4+0x3c>
     b84:	45 c0       	rjmp	.+138    	; 0xc10 <__vector_4+0xc6>
		feedback_PulsesA=pulsesA;
     b86:	80 91 3a 01 	lds	r24, 0x013A
     b8a:	90 91 3b 01 	lds	r25, 0x013B
     b8e:	a0 91 3c 01 	lds	r26, 0x013C
     b92:	b0 91 3d 01 	lds	r27, 0x013D
     b96:	80 93 4e 01 	sts	0x014E, r24
     b9a:	90 93 4f 01 	sts	0x014F, r25
     b9e:	a0 93 50 01 	sts	0x0150, r26
     ba2:	b0 93 51 01 	sts	0x0151, r27
		feedback_PulsesB=pulsesB;
     ba6:	80 91 4a 01 	lds	r24, 0x014A
     baa:	90 91 4b 01 	lds	r25, 0x014B
     bae:	a0 91 4c 01 	lds	r26, 0x014C
     bb2:	b0 91 4d 01 	lds	r27, 0x014D
     bb6:	80 93 52 01 	sts	0x0152, r24
     bba:	90 93 53 01 	sts	0x0153, r25
     bbe:	a0 93 54 01 	sts	0x0154, r26
     bc2:	b0 93 55 01 	sts	0x0155, r27
		//sendIntUSART(pulsesBturn);

		pulsesA=0;
     bc6:	10 92 3a 01 	sts	0x013A, r1
     bca:	10 92 3b 01 	sts	0x013B, r1
     bce:	10 92 3c 01 	sts	0x013C, r1
     bd2:	10 92 3d 01 	sts	0x013D, r1
		pulsesB=0;
     bd6:	10 92 4a 01 	sts	0x014A, r1
     bda:	10 92 4b 01 	sts	0x014B, r1
     bde:	10 92 4c 01 	sts	0x014C, r1
     be2:	10 92 4d 01 	sts	0x014D, r1
		c=0;
     be6:	10 92 0d 01 	sts	0x010D, r1
     bea:	10 92 0c 01 	sts	0x010C, r1
		motorsPID();
     bee:	0e 94 a2 02 	call	0x544	; 0x544 <motorsPID>
		
		if(counter==1){
     bf2:	80 91 f6 00 	lds	r24, 0x00F6
     bf6:	90 91 f7 00 	lds	r25, 0x00F7
     bfa:	01 97       	sbiw	r24, 0x01	; 1
     bfc:	49 f4       	brne	.+18     	; 0xc10 <__vector_4+0xc6>
			fifm++;
     bfe:	80 91 f4 00 	lds	r24, 0x00F4
     c02:	90 91 f5 00 	lds	r25, 0x00F5
     c06:	01 96       	adiw	r24, 0x01	; 1
     c08:	90 93 f5 00 	sts	0x00F5, r25
     c0c:	80 93 f4 00 	sts	0x00F4, r24
		}
	}
	
	
}
     c10:	ff 91       	pop	r31
     c12:	ef 91       	pop	r30
     c14:	bf 91       	pop	r27
     c16:	af 91       	pop	r26
     c18:	9f 91       	pop	r25
     c1a:	8f 91       	pop	r24
     c1c:	7f 91       	pop	r23
     c1e:	6f 91       	pop	r22
     c20:	5f 91       	pop	r21
     c22:	4f 91       	pop	r20
     c24:	3f 91       	pop	r19
     c26:	2f 91       	pop	r18
     c28:	0f 90       	pop	r0
     c2a:	0f be       	out	0x3f, r0	; 63
     c2c:	0f 90       	pop	r0
     c2e:	1f 90       	pop	r1
     c30:	18 95       	reti

00000c32 <__vector_1>:

ISR (INT0_vect){
     c32:	1f 92       	push	r1
     c34:	0f 92       	push	r0
     c36:	0f b6       	in	r0, 0x3f	; 63
     c38:	0f 92       	push	r0
     c3a:	11 24       	eor	r1, r1
     c3c:	2f 93       	push	r18
     c3e:	3f 93       	push	r19
     c40:	4f 93       	push	r20
     c42:	5f 93       	push	r21
     c44:	6f 93       	push	r22
     c46:	7f 93       	push	r23
     c48:	8f 93       	push	r24
     c4a:	9f 93       	push	r25
     c4c:	af 93       	push	r26
     c4e:	bf 93       	push	r27
     c50:	ef 93       	push	r30
     c52:	ff 93       	push	r31
	pulsesB++;
     c54:	20 e0       	ldi	r18, 0x00	; 0
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	40 e8       	ldi	r20, 0x80	; 128
     c5a:	5f e3       	ldi	r21, 0x3F	; 63
     c5c:	60 91 4a 01 	lds	r22, 0x014A
     c60:	70 91 4b 01 	lds	r23, 0x014B
     c64:	80 91 4c 01 	lds	r24, 0x014C
     c68:	90 91 4d 01 	lds	r25, 0x014D
     c6c:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__addsf3>
     c70:	60 93 4a 01 	sts	0x014A, r22
     c74:	70 93 4b 01 	sts	0x014B, r23
     c78:	80 93 4c 01 	sts	0x014C, r24
     c7c:	90 93 4d 01 	sts	0x014D, r25
	if (flagB==1){
     c80:	80 91 00 01 	lds	r24, 0x0100
     c84:	90 91 01 01 	lds	r25, 0x0101
     c88:	01 97       	sbiw	r24, 0x01	; 1
     c8a:	b1 f4       	brne	.+44     	; 0xcb8 <__vector_1+0x86>
		pulsesBturn++;
     c8c:	20 e0       	ldi	r18, 0x00	; 0
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	40 e8       	ldi	r20, 0x80	; 128
     c92:	5f e3       	ldi	r21, 0x3F	; 63
     c94:	60 91 fc 00 	lds	r22, 0x00FC
     c98:	70 91 fd 00 	lds	r23, 0x00FD
     c9c:	80 91 fe 00 	lds	r24, 0x00FE
     ca0:	90 91 ff 00 	lds	r25, 0x00FF
     ca4:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__addsf3>
     ca8:	60 93 fc 00 	sts	0x00FC, r22
     cac:	70 93 fd 00 	sts	0x00FD, r23
     cb0:	80 93 fe 00 	sts	0x00FE, r24
     cb4:	90 93 ff 00 	sts	0x00FF, r25
	}
}
     cb8:	ff 91       	pop	r31
     cba:	ef 91       	pop	r30
     cbc:	bf 91       	pop	r27
     cbe:	af 91       	pop	r26
     cc0:	9f 91       	pop	r25
     cc2:	8f 91       	pop	r24
     cc4:	7f 91       	pop	r23
     cc6:	6f 91       	pop	r22
     cc8:	5f 91       	pop	r21
     cca:	4f 91       	pop	r20
     ccc:	3f 91       	pop	r19
     cce:	2f 91       	pop	r18
     cd0:	0f 90       	pop	r0
     cd2:	0f be       	out	0x3f, r0	; 63
     cd4:	0f 90       	pop	r0
     cd6:	1f 90       	pop	r1
     cd8:	18 95       	reti

00000cda <__vector_2>:
ISR (INT1_vect){
     cda:	1f 92       	push	r1
     cdc:	0f 92       	push	r0
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	0f 92       	push	r0
     ce2:	11 24       	eor	r1, r1
     ce4:	2f 93       	push	r18
     ce6:	3f 93       	push	r19
     ce8:	4f 93       	push	r20
     cea:	5f 93       	push	r21
     cec:	6f 93       	push	r22
     cee:	7f 93       	push	r23
     cf0:	8f 93       	push	r24
     cf2:	9f 93       	push	r25
     cf4:	af 93       	push	r26
     cf6:	bf 93       	push	r27
     cf8:	ef 93       	push	r30
     cfa:	ff 93       	push	r31
	pulsesA++;
     cfc:	20 e0       	ldi	r18, 0x00	; 0
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	40 e8       	ldi	r20, 0x80	; 128
     d02:	5f e3       	ldi	r21, 0x3F	; 63
     d04:	60 91 3a 01 	lds	r22, 0x013A
     d08:	70 91 3b 01 	lds	r23, 0x013B
     d0c:	80 91 3c 01 	lds	r24, 0x013C
     d10:	90 91 3d 01 	lds	r25, 0x013D
     d14:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__addsf3>
     d18:	60 93 3a 01 	sts	0x013A, r22
     d1c:	70 93 3b 01 	sts	0x013B, r23
     d20:	80 93 3c 01 	sts	0x013C, r24
     d24:	90 93 3d 01 	sts	0x013D, r25
	if (flagA==1){
     d28:	80 91 02 01 	lds	r24, 0x0102
     d2c:	90 91 03 01 	lds	r25, 0x0103
     d30:	01 97       	sbiw	r24, 0x01	; 1
     d32:	b1 f4       	brne	.+44     	; 0xd60 <__vector_2+0x86>
		pulsesAturn++;
     d34:	20 e0       	ldi	r18, 0x00	; 0
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	40 e8       	ldi	r20, 0x80	; 128
     d3a:	5f e3       	ldi	r21, 0x3F	; 63
     d3c:	60 91 f8 00 	lds	r22, 0x00F8
     d40:	70 91 f9 00 	lds	r23, 0x00F9
     d44:	80 91 fa 00 	lds	r24, 0x00FA
     d48:	90 91 fb 00 	lds	r25, 0x00FB
     d4c:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__addsf3>
     d50:	60 93 f8 00 	sts	0x00F8, r22
     d54:	70 93 f9 00 	sts	0x00F9, r23
     d58:	80 93 fa 00 	sts	0x00FA, r24
     d5c:	90 93 fb 00 	sts	0x00FB, r25
	}
}
     d60:	ff 91       	pop	r31
     d62:	ef 91       	pop	r30
     d64:	bf 91       	pop	r27
     d66:	af 91       	pop	r26
     d68:	9f 91       	pop	r25
     d6a:	8f 91       	pop	r24
     d6c:	7f 91       	pop	r23
     d6e:	6f 91       	pop	r22
     d70:	5f 91       	pop	r21
     d72:	4f 91       	pop	r20
     d74:	3f 91       	pop	r19
     d76:	2f 91       	pop	r18
     d78:	0f 90       	pop	r0
     d7a:	0f be       	out	0x3f, r0	; 63
     d7c:	0f 90       	pop	r0
     d7e:	1f 90       	pop	r1
     d80:	18 95       	reti

00000d82 <__vector_13>:
ISR (USART_RXC_vect)
{
     d82:	1f 92       	push	r1
     d84:	0f 92       	push	r0
     d86:	0f b6       	in	r0, 0x3f	; 63
     d88:	0f 92       	push	r0
     d8a:	11 24       	eor	r1, r1
     d8c:	2f 93       	push	r18
     d8e:	3f 93       	push	r19
     d90:	4f 93       	push	r20
     d92:	5f 93       	push	r21
     d94:	6f 93       	push	r22
     d96:	7f 93       	push	r23
     d98:	8f 93       	push	r24
     d9a:	9f 93       	push	r25
     d9c:	af 93       	push	r26
     d9e:	bf 93       	push	r27
     da0:	cf 93       	push	r28
     da2:	ef 93       	push	r30
     da4:	ff 93       	push	r31
	char ReceivedByte ;
	ReceivedByte = UDR ; // Fetch the received byte value into the variable " ByteReceived "
     da6:	cc b1       	in	r28, 0x0c	; 12
	//UDR = ReceivedByte ; // Echo back the received byte back to the computer
	/* local variable definition */
	switch(ReceivedByte)
     da8:	8c 2f       	mov	r24, r28
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	fc 01       	movw	r30, r24
     dae:	f0 97       	sbiw	r30, 0x30	; 48
     db0:	eb 34       	cpi	r30, 0x4B	; 75
     db2:	f1 05       	cpc	r31, r1
     db4:	08 f0       	brcs	.+2      	; 0xdb8 <__vector_13+0x36>
     db6:	6d c1       	rjmp	.+730    	; 0x1092 <__vector_13+0x310>
     db8:	e6 5d       	subi	r30, 0xD6	; 214
     dba:	ff 4f       	sbci	r31, 0xFF	; 255
     dbc:	0c 94 d2 0e 	jmp	0x1da4	; 0x1da4 <__tablejump2__>
	{
		case 'w' :
		forwardAB();
     dc0:	0e 94 a1 00 	call	0x142	; 0x142 <forwardAB>
		
		set_PulsesRef=10;
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	a0 e2       	ldi	r26, 0x20	; 32
     dca:	b1 e4       	ldi	r27, 0x41	; 65
     dcc:	80 93 16 01 	sts	0x0116, r24
     dd0:	90 93 17 01 	sts	0x0117, r25
     dd4:	a0 93 18 01 	sts	0x0118, r26
     dd8:	b0 93 19 01 	sts	0x0119, r27
		set_PulsesA=set_PulsesRef;
     ddc:	80 93 12 01 	sts	0x0112, r24
     de0:	90 93 13 01 	sts	0x0113, r25
     de4:	a0 93 14 01 	sts	0x0114, r26
     de8:	b0 93 15 01 	sts	0x0115, r27
		set_PulsesB=set_PulsesRef;
     dec:	80 93 0e 01 	sts	0x010E, r24
     df0:	90 93 0f 01 	sts	0x010F, r25
     df4:	a0 93 10 01 	sts	0x0110, r26
     df8:	b0 93 11 01 	sts	0x0111, r27
		//set_rpmA=set_rpmB;
		break;
     dfc:	4e c1       	rjmp	.+668    	; 0x109a <__vector_13+0x318>
		
		case 'z' :
		backwardsAB();
     dfe:	0e 94 a6 00 	call	0x14c	; 0x14c <backwardsAB>
		break;
     e02:	4b c1       	rjmp	.+662    	; 0x109a <__vector_13+0x318>
		
		case 'a' :
		leftOnly();
     e04:	0e 94 b0 00 	call	0x160	; 0x160 <leftOnly>
		break;
     e08:	48 c1       	rjmp	.+656    	; 0x109a <__vector_13+0x318>
		
		case 'd' :
		rightOnly();
     e0a:	0e 94 ab 00 	call	0x156	; 0x156 <rightOnly>
		break;
     e0e:	45 c1       	rjmp	.+650    	; 0x109a <__vector_13+0x318>
		
		case 's' :
		stopAB();
     e10:	0e 94 b5 00 	call	0x16a	; 0x16a <stopAB>
		break;
     e14:	42 c1       	rjmp	.+644    	; 0x109a <__vector_13+0x318>
		
		case 'e' :

		set_PulsesB+=1;
     e16:	20 e0       	ldi	r18, 0x00	; 0
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	40 e8       	ldi	r20, 0x80	; 128
     e1c:	5f e3       	ldi	r21, 0x3F	; 63
     e1e:	60 91 0e 01 	lds	r22, 0x010E
     e22:	70 91 0f 01 	lds	r23, 0x010F
     e26:	80 91 10 01 	lds	r24, 0x0110
     e2a:	90 91 11 01 	lds	r25, 0x0111
     e2e:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__addsf3>
     e32:	60 93 0e 01 	sts	0x010E, r22
     e36:	70 93 0f 01 	sts	0x010F, r23
     e3a:	80 93 10 01 	sts	0x0110, r24
     e3e:	90 93 11 01 	sts	0x0111, r25
		break;
     e42:	2b c1       	rjmp	.+598    	; 0x109a <__vector_13+0x318>

		case 'q' :
		set_PulsesA+=1;
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	40 e8       	ldi	r20, 0x80	; 128
     e4a:	5f e3       	ldi	r21, 0x3F	; 63
     e4c:	60 91 12 01 	lds	r22, 0x0112
     e50:	70 91 13 01 	lds	r23, 0x0113
     e54:	80 91 14 01 	lds	r24, 0x0114
     e58:	90 91 15 01 	lds	r25, 0x0115
     e5c:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__addsf3>
     e60:	60 93 12 01 	sts	0x0112, r22
     e64:	70 93 13 01 	sts	0x0113, r23
     e68:	80 93 14 01 	sts	0x0114, r24
     e6c:	90 93 15 01 	sts	0x0115, r25
		
		break;
     e70:	14 c1       	rjmp	.+552    	; 0x109a <__vector_13+0x318>
		
		case 't' :
		sendIntUSART(set_PulsesRef);
     e72:	60 91 16 01 	lds	r22, 0x0116
     e76:	70 91 17 01 	lds	r23, 0x0117
     e7a:	80 91 18 01 	lds	r24, 0x0118
     e7e:	90 91 19 01 	lds	r25, 0x0119
     e82:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__fixsfsi>
     e86:	cb 01       	movw	r24, r22
     e88:	0e 94 f5 00 	call	0x1ea	; 0x1ea <sendIntUSART>
		sendStringUSART("L:");
     e8c:	85 eb       	ldi	r24, 0xB5	; 181
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	0e 94 e6 00 	call	0x1cc	; 0x1cc <sendStringUSART>
		sendIntUSART(feedback_PulsesA);
     e94:	60 91 4e 01 	lds	r22, 0x014E
     e98:	70 91 4f 01 	lds	r23, 0x014F
     e9c:	80 91 50 01 	lds	r24, 0x0150
     ea0:	90 91 51 01 	lds	r25, 0x0151
     ea4:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__fixsfsi>
     ea8:	cb 01       	movw	r24, r22
     eaa:	0e 94 f5 00 	call	0x1ea	; 0x1ea <sendIntUSART>
		sendStringUSART("R:");
     eae:	88 eb       	ldi	r24, 0xB8	; 184
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <sendStringUSART>
		sendIntUSART(feedback_PulsesB);
     eb6:	60 91 52 01 	lds	r22, 0x0152
     eba:	70 91 53 01 	lds	r23, 0x0153
     ebe:	80 91 54 01 	lds	r24, 0x0154
     ec2:	90 91 55 01 	lds	r25, 0x0155
     ec6:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__fixsfsi>
     eca:	cb 01       	movw	r24, r22
     ecc:	0e 94 f5 00 	call	0x1ea	; 0x1ea <sendIntUSART>
		
		break;
     ed0:	e4 c0       	rjmp	.+456    	; 0x109a <__vector_13+0x318>
		
		case 'k' :
		
		set_PulsesRef+=kAccelStep;
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	40 e2       	ldi	r20, 0x20	; 32
     ed8:	51 e4       	ldi	r21, 0x41	; 65
     eda:	60 91 16 01 	lds	r22, 0x0116
     ede:	70 91 17 01 	lds	r23, 0x0117
     ee2:	80 91 18 01 	lds	r24, 0x0118
     ee6:	90 91 19 01 	lds	r25, 0x0119
     eea:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__addsf3>
     eee:	60 93 16 01 	sts	0x0116, r22
     ef2:	70 93 17 01 	sts	0x0117, r23
     ef6:	80 93 18 01 	sts	0x0118, r24
     efa:	90 93 19 01 	sts	0x0119, r25
		break;
     efe:	cd c0       	rjmp	.+410    	; 0x109a <__vector_13+0x318>
		case 'l' :
		
		set_PulsesRef-=kAccelStep;
     f00:	20 e0       	ldi	r18, 0x00	; 0
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	40 e2       	ldi	r20, 0x20	; 32
     f06:	51 e4       	ldi	r21, 0x41	; 65
     f08:	60 91 16 01 	lds	r22, 0x0116
     f0c:	70 91 17 01 	lds	r23, 0x0117
     f10:	80 91 18 01 	lds	r24, 0x0118
     f14:	90 91 19 01 	lds	r25, 0x0119
     f18:	0e 94 b7 0c 	call	0x196e	; 0x196e <__subsf3>
     f1c:	60 93 16 01 	sts	0x0116, r22
     f20:	70 93 17 01 	sts	0x0117, r23
     f24:	80 93 18 01 	sts	0x0118, r24
     f28:	90 93 19 01 	sts	0x0119, r25
		break;
     f2c:	b6 c0       	rjmp	.+364    	; 0x109a <__vector_13+0x318>
		////////////////////
		//pid tuning
		
		
		case '1' :
		P_GAIN=P_GAIN+1;
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	40 e8       	ldi	r20, 0x80	; 128
     f34:	5f e3       	ldi	r21, 0x3F	; 63
     f36:	60 91 64 00 	lds	r22, 0x0064
     f3a:	70 91 65 00 	lds	r23, 0x0065
     f3e:	80 91 66 00 	lds	r24, 0x0066
     f42:	90 91 67 00 	lds	r25, 0x0067
     f46:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__addsf3>
     f4a:	60 93 64 00 	sts	0x0064, r22
     f4e:	70 93 65 00 	sts	0x0065, r23
     f52:	80 93 66 00 	sts	0x0066, r24
     f56:	90 93 67 00 	sts	0x0067, r25
		break;
     f5a:	9f c0       	rjmp	.+318    	; 0x109a <__vector_13+0x318>
		case '2' :
		I_GAIN=I_GAIN+0.5;
     f5c:	20 e0       	ldi	r18, 0x00	; 0
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	40 e0       	ldi	r20, 0x00	; 0
     f62:	5f e3       	ldi	r21, 0x3F	; 63
     f64:	60 91 2a 01 	lds	r22, 0x012A
     f68:	70 91 2b 01 	lds	r23, 0x012B
     f6c:	80 91 2c 01 	lds	r24, 0x012C
     f70:	90 91 2d 01 	lds	r25, 0x012D
     f74:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__addsf3>
     f78:	60 93 2a 01 	sts	0x012A, r22
     f7c:	70 93 2b 01 	sts	0x012B, r23
     f80:	80 93 2c 01 	sts	0x012C, r24
     f84:	90 93 2d 01 	sts	0x012D, r25
		break;
     f88:	88 c0       	rjmp	.+272    	; 0x109a <__vector_13+0x318>
		case '3' :
		D_GAIN=D_GAIN+0.01;
     f8a:	2a e0       	ldi	r18, 0x0A	; 10
     f8c:	37 ed       	ldi	r19, 0xD7	; 215
     f8e:	43 e2       	ldi	r20, 0x23	; 35
     f90:	5c e3       	ldi	r21, 0x3C	; 60
     f92:	60 91 26 01 	lds	r22, 0x0126
     f96:	70 91 27 01 	lds	r23, 0x0127
     f9a:	80 91 28 01 	lds	r24, 0x0128
     f9e:	90 91 29 01 	lds	r25, 0x0129
     fa2:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__addsf3>
     fa6:	60 93 26 01 	sts	0x0126, r22
     faa:	70 93 27 01 	sts	0x0127, r23
     fae:	80 93 28 01 	sts	0x0128, r24
     fb2:	90 93 29 01 	sts	0x0129, r25
		break;
     fb6:	71 c0       	rjmp	.+226    	; 0x109a <__vector_13+0x318>
		
		case '4' :
		pGain=pGain-1;
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	40 e8       	ldi	r20, 0x80	; 128
     fbe:	5f e3       	ldi	r21, 0x3F	; 63
     fc0:	60 91 60 00 	lds	r22, 0x0060
     fc4:	70 91 61 00 	lds	r23, 0x0061
     fc8:	80 91 62 00 	lds	r24, 0x0062
     fcc:	90 91 63 00 	lds	r25, 0x0063
     fd0:	0e 94 b7 0c 	call	0x196e	; 0x196e <__subsf3>
     fd4:	60 93 60 00 	sts	0x0060, r22
     fd8:	70 93 61 00 	sts	0x0061, r23
     fdc:	80 93 62 00 	sts	0x0062, r24
     fe0:	90 93 63 00 	sts	0x0063, r25
		break;
     fe4:	5a c0       	rjmp	.+180    	; 0x109a <__vector_13+0x318>
		case '5' :
		iGain=iGain-0.5;
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	40 e0       	ldi	r20, 0x00	; 0
     fec:	5f e3       	ldi	r21, 0x3F	; 63
     fee:	60 91 22 01 	lds	r22, 0x0122
     ff2:	70 91 23 01 	lds	r23, 0x0123
     ff6:	80 91 24 01 	lds	r24, 0x0124
     ffa:	90 91 25 01 	lds	r25, 0x0125
     ffe:	0e 94 b7 0c 	call	0x196e	; 0x196e <__subsf3>
    1002:	60 93 22 01 	sts	0x0122, r22
    1006:	70 93 23 01 	sts	0x0123, r23
    100a:	80 93 24 01 	sts	0x0124, r24
    100e:	90 93 25 01 	sts	0x0125, r25
		break;
    1012:	43 c0       	rjmp	.+134    	; 0x109a <__vector_13+0x318>
		case '6' :
		dGain=dGain-1;
    1014:	20 e0       	ldi	r18, 0x00	; 0
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	40 e8       	ldi	r20, 0x80	; 128
    101a:	5f e3       	ldi	r21, 0x3F	; 63
    101c:	60 91 1e 01 	lds	r22, 0x011E
    1020:	70 91 1f 01 	lds	r23, 0x011F
    1024:	80 91 20 01 	lds	r24, 0x0120
    1028:	90 91 21 01 	lds	r25, 0x0121
    102c:	0e 94 b7 0c 	call	0x196e	; 0x196e <__subsf3>
    1030:	60 93 1e 01 	sts	0x011E, r22
    1034:	70 93 1f 01 	sts	0x011F, r23
    1038:	80 93 20 01 	sts	0x0120, r24
    103c:	90 93 21 01 	sts	0x0121, r25
		break;
    1040:	2c c0       	rjmp	.+88     	; 0x109a <__vector_13+0x318>
		
		case '0' :
		sendIntUSART(P_GAIN);
    1042:	60 91 64 00 	lds	r22, 0x0064
    1046:	70 91 65 00 	lds	r23, 0x0065
    104a:	80 91 66 00 	lds	r24, 0x0066
    104e:	90 91 67 00 	lds	r25, 0x0067
    1052:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__fixsfsi>
    1056:	cb 01       	movw	r24, r22
    1058:	0e 94 f5 00 	call	0x1ea	; 0x1ea <sendIntUSART>
		sendIntUSART(I_GAIN);
    105c:	60 91 2a 01 	lds	r22, 0x012A
    1060:	70 91 2b 01 	lds	r23, 0x012B
    1064:	80 91 2c 01 	lds	r24, 0x012C
    1068:	90 91 2d 01 	lds	r25, 0x012D
    106c:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__fixsfsi>
    1070:	cb 01       	movw	r24, r22
    1072:	0e 94 f5 00 	call	0x1ea	; 0x1ea <sendIntUSART>
		sendIntUSART(D_GAIN);
    1076:	60 91 26 01 	lds	r22, 0x0126
    107a:	70 91 27 01 	lds	r23, 0x0127
    107e:	80 91 28 01 	lds	r24, 0x0128
    1082:	90 91 29 01 	lds	r25, 0x0129
    1086:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__fixsfsi>
    108a:	cb 01       	movw	r24, r22
    108c:	0e 94 f5 00 	call	0x1ea	; 0x1ea <sendIntUSART>
		break;
    1090:	04 c0       	rjmp	.+8      	; 0x109a <__vector_13+0x318>
		////////////////
		default :
		sendStringUSART("xunia");
    1092:	8b eb       	ldi	r24, 0xBB	; 187
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	0e 94 e6 00 	call	0x1cc	; 0x1cc <sendStringUSART>
		
		
		
	}
	UDR = ReceivedByte ;
    109a:	cc b9       	out	0x0c, r28	; 12
	
	
}
    109c:	ff 91       	pop	r31
    109e:	ef 91       	pop	r30
    10a0:	cf 91       	pop	r28
    10a2:	bf 91       	pop	r27
    10a4:	af 91       	pop	r26
    10a6:	9f 91       	pop	r25
    10a8:	8f 91       	pop	r24
    10aa:	7f 91       	pop	r23
    10ac:	6f 91       	pop	r22
    10ae:	5f 91       	pop	r21
    10b0:	4f 91       	pop	r20
    10b2:	3f 91       	pop	r19
    10b4:	2f 91       	pop	r18
    10b6:	0f 90       	pop	r0
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	0f 90       	pop	r0
    10bc:	1f 90       	pop	r1
    10be:	18 95       	reti

000010c0 <makeCircle>:
	flagA=1;
	flagB=1;
}
void makeCircle()
{
	set_PulsesA=7;
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	a0 ee       	ldi	r26, 0xE0	; 224
    10c6:	b0 e4       	ldi	r27, 0x40	; 64
    10c8:	80 93 12 01 	sts	0x0112, r24
    10cc:	90 93 13 01 	sts	0x0113, r25
    10d0:	a0 93 14 01 	sts	0x0114, r26
    10d4:	b0 93 15 01 	sts	0x0115, r27
	set_PulsesB=11;
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	a0 e3       	ldi	r26, 0x30	; 48
    10de:	b1 e4       	ldi	r27, 0x41	; 65
    10e0:	80 93 0e 01 	sts	0x010E, r24
    10e4:	90 93 0f 01 	sts	0x010F, r25
    10e8:	a0 93 10 01 	sts	0x0110, r26
    10ec:	b0 93 11 01 	sts	0x0111, r27
    10f0:	08 95       	ret

000010f2 <main>:
}
int main(void){
	LED_PIN_init();
    10f2:	ba 9a       	sbi	0x17, 2	; 23
	USART_Init();
    10f4:	0e 94 26 01 	call	0x24c	; 0x24c <USART_Init>
	//ADC_Init();
	init_sensors();
    10f8:	0e 94 c3 01 	call	0x386	; 0x386 <init_sensors>
	init_io();
    10fc:	0e 94 b4 01 	call	0x368	; 0x368 <init_io>
	init_interrupts2();
    1100:	0e 94 a9 01 	call	0x352	; 0x352 <init_interrupts2>
	init_interrupts();
    1104:	0e 94 9e 01 	call	0x33c	; 0x33c <init_interrupts>
	init_timer2();
    1108:	0e 94 cb 01 	call	0x396	; 0x396 <init_timer2>
	DDRD   = (1<<5)|(1<<4);  // output pins OC1A, OC1B   Mega16,32
    110c:	80 e3       	ldi	r24, 0x30	; 48
    110e:	81 bb       	out	0x11, r24	; 17
	forwardAB();
    1110:	0e 94 a1 00 	call	0x142	; 0x142 <forwardAB>
	OCR1A = 0;
    1114:	1b bc       	out	0x2b, r1	; 43
    1116:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;
    1118:	19 bc       	out	0x29, r1	; 41
    111a:	18 bc       	out	0x28, r1	; 40
	set_PulsesA=set_PulsesRef;
    111c:	c0 90 16 01 	lds	r12, 0x0116
    1120:	d0 90 17 01 	lds	r13, 0x0117
    1124:	e0 90 18 01 	lds	r14, 0x0118
    1128:	f0 90 19 01 	lds	r15, 0x0119
    112c:	c0 92 12 01 	sts	0x0112, r12
    1130:	d0 92 13 01 	sts	0x0113, r13
    1134:	e0 92 14 01 	sts	0x0114, r14
    1138:	f0 92 15 01 	sts	0x0115, r15
	set_PulsesB=set_PulsesRef;
    113c:	c0 92 0e 01 	sts	0x010E, r12
    1140:	d0 92 0f 01 	sts	0x010F, r13
    1144:	e0 92 10 01 	sts	0x0110, r14
    1148:	f0 92 11 01 	sts	0x0111, r15
	previous_error = set_PulsesA - feedback_PulsesA;
    114c:	20 91 4e 01 	lds	r18, 0x014E
    1150:	30 91 4f 01 	lds	r19, 0x014F
    1154:	40 91 50 01 	lds	r20, 0x0150
    1158:	50 91 51 01 	lds	r21, 0x0151
    115c:	c7 01       	movw	r24, r14
    115e:	b6 01       	movw	r22, r12
    1160:	0e 94 b7 0c 	call	0x196e	; 0x196e <__subsf3>
    1164:	60 93 44 01 	sts	0x0144, r22
    1168:	70 93 45 01 	sts	0x0145, r23
    116c:	80 93 46 01 	sts	0x0146, r24
    1170:	90 93 47 01 	sts	0x0147, r25
	previous_errorB= set_PulsesB - feedback_PulsesB;
    1174:	20 91 52 01 	lds	r18, 0x0152
    1178:	30 91 53 01 	lds	r19, 0x0153
    117c:	40 91 54 01 	lds	r20, 0x0154
    1180:	50 91 55 01 	lds	r21, 0x0155
    1184:	c7 01       	movw	r24, r14
    1186:	b6 01       	movw	r22, r12
    1188:	0e 94 b7 0c 	call	0x196e	; 0x196e <__subsf3>
    118c:	60 93 1a 01 	sts	0x011A, r22
    1190:	70 93 1b 01 	sts	0x011B, r23
    1194:	80 93 1c 01 	sts	0x011C, r24
    1198:	90 93 1d 01 	sts	0x011D, r25
	sendStringUSART("\n START ADJUST \n");
    119c:	81 ec       	ldi	r24, 0xC1	; 193
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	0e 94 e6 00 	call	0x1cc	; 0x1cc <sendStringUSART>
	stage=findLine;
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	80 93 3e 01 	sts	0x013E, r24
				case test2:
				btMode();
				stage=test;
				break;
				//////////////////////////////////////////////////////
				default:stage=loop; break;
    11aa:	02 e0       	ldi	r16, 0x02	; 2
				stage=test;
				break;
				//////////////////////////////////////////////
				case test2:
				btMode();
				stage=test;
    11ac:	1b e0       	ldi	r17, 0x0B	; 11
				stage=test;
				break;
				//////////////////////////////////////////////////////
				case test:

				counter=1;
    11ae:	c1 e0       	ldi	r28, 0x01	; 1
    11b0:	d0 e0       	ldi	r29, 0x00	; 0
				pulsesAturn=0;
				flagA=1;
				while (pulsesAturn<500)
				{
					forwardAB();
					set_PulsesRef=10;
    11b2:	0f 2e       	mov	r0, r31
    11b4:	c1 2c       	mov	r12, r1
    11b6:	d1 2c       	mov	r13, r1
    11b8:	f0 e2       	ldi	r31, 0x20	; 32
    11ba:	ef 2e       	mov	r14, r31
    11bc:	f1 e4       	ldi	r31, 0x41	; 65
    11be:	ff 2e       	mov	r15, r31
    11c0:	f0 2d       	mov	r31, r0
							stage=follow;
							}else{
							set_PulsesRef=10;
							followLine();
							
							stage=follow2;
    11c2:	68 94       	set
    11c4:	44 24       	eor	r4, r4
    11c6:	43 f8       	bld	r4, 3
											}
											counter=0;
											fifm=0;	
									
									
							stage=follow;
    11c8:	0f 2e       	mov	r0, r31
    11ca:	f7 e0       	ldi	r31, 0x07	; 7
    11cc:	6f 2e       	mov	r6, r31
    11ce:	f0 2d       	mov	r31, r0
				//////////////////////////////////////////////////////
				case follow:
				if (sensFull()==1)
				{
					
					stage=wall;
    11d0:	0f 2e       	mov	r0, r31
    11d2:	fa e0       	ldi	r31, 0x0A	; 10
    11d4:	3f 2e       	mov	r3, r31
    11d6:	f0 2d       	mov	r31, r0
				flagA=1;
				pulsesAturn=0;
				while (pulsesAturn<100)
				{
					backwardsAB();
					set_PulsesRef=5;
    11d8:	0f 2e       	mov	r0, r31
    11da:	81 2c       	mov	r8, r1
    11dc:	91 2c       	mov	r9, r1
    11de:	f0 ea       	ldi	r31, 0xA0	; 160
    11e0:	af 2e       	mov	r10, r31
    11e2:	f0 e4       	ldi	r31, 0x40	; 64
    11e4:	bf 2e       	mov	r11, r31
    11e6:	f0 2d       	mov	r31, r0
					setBothMotorsRpm(set_PulsesRef);
				}
				pulsesAturn=0;
				flagA=0;
				stage= circle;
    11e8:	0f 2e       	mov	r0, r31
    11ea:	f6 e0       	ldi	r31, 0x06	; 6
    11ec:	7f 2e       	mov	r7, r31
    11ee:	f0 2d       	mov	r31, r0
				//////////////////////////////////////////////////////
				case loop:
				if (sensFull()==1)
				{

					stage=stop;
    11f0:	0f 2e       	mov	r0, r31
    11f2:	f5 e0       	ldi	r31, 0x05	; 5
    11f4:	2f 2e       	mov	r2, r31
    11f6:	f0 2d       	mov	r31, r0
					//backManeuvr();
					sendStringUSART("Found it!");
					stage=loop;
					}else{		set_PulsesRef=10;
					setBothMotorsRpm(set_PulsesRef);
				stage=findLine;}
    11f8:	55 24       	eor	r5, r5
    11fa:	53 94       	inc	r5
	stage=findLine;
	
	
	while (1)
	{
		switch(stage)
    11fc:	80 91 3e 01 	lds	r24, 0x013E
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	8d 30       	cpi	r24, 0x0D	; 13
    1204:	91 05       	cpc	r25, r1
    1206:	08 f0       	brcs	.+2      	; 0x120a <main+0x118>
    1208:	9a c3       	rjmp	.+1844   	; 0x193e <main+0x84c>
    120a:	fc 01       	movw	r30, r24
    120c:	eb 58       	subi	r30, 0x8B	; 139
    120e:	ff 4f       	sbci	r31, 0xFF	; 255
    1210:	0c 94 d2 0e 	jmp	0x1da4	; 0x1da4 <__tablejump2__>
		{
			//////////////////////////////////////////////
			case start:
			if(readSensors()==4)
    1214:	0e 94 ab 03 	call	0x756	; 0x756 <readSensors>
    1218:	20 e0       	ldi	r18, 0x00	; 0
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	40 e8       	ldi	r20, 0x80	; 128
    121e:	50 e4       	ldi	r21, 0x40	; 64
    1220:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__cmpsf2>
    1224:	81 11       	cpse	r24, r1
    1226:	09 c0       	rjmp	.+18     	; 0x123a <main+0x148>
			{
				sendStringUSART("Lets find the line");
    1228:	82 ed       	ldi	r24, 0xD2	; 210
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <sendStringUSART>
				forwardAB();
    1230:	0e 94 a1 00 	call	0x142	; 0x142 <forwardAB>
				
				stage=findLine;
    1234:	50 92 3e 01 	sts	0x013E, r5
    1238:	e1 cf       	rjmp	.-62     	; 0x11fc <main+0x10a>
				} else {stage=start;}
    123a:	10 92 3e 01 	sts	0x013E, r1
    123e:	de cf       	rjmp	.-68     	; 0x11fc <main+0x10a>
				break;
				//////////////////////////////////////////////
				case findLine:

				if(readSensors()==4){
    1240:	0e 94 ab 03 	call	0x756	; 0x756 <readSensors>
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	40 e8       	ldi	r20, 0x80	; 128
    124a:	50 e4       	ldi	r21, 0x40	; 64
    124c:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__cmpsf2>
    1250:	81 11       	cpse	r24, r1
    1252:	0d c0       	rjmp	.+26     	; 0x126e <main+0x17c>
					stopA();
    1254:	0e 94 bd 00 	call	0x17a	; 0x17a <stopA>
					stopB();
    1258:	0e 94 ba 00 	call	0x174	; 0x174 <stopB>
					make90R();
    125c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <make90R>
					//backManeuvr();
					sendStringUSART("Found it!");
    1260:	85 ee       	ldi	r24, 0xE5	; 229
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	0e 94 e6 00 	call	0x1cc	; 0x1cc <sendStringUSART>
					stage=loop;
    1268:	00 93 3e 01 	sts	0x013E, r16
    126c:	c7 cf       	rjmp	.-114    	; 0x11fc <main+0x10a>
					}else{		set_PulsesRef=10;
    126e:	c0 92 16 01 	sts	0x0116, r12
    1272:	d0 92 17 01 	sts	0x0117, r13
    1276:	e0 92 18 01 	sts	0x0118, r14
    127a:	f0 92 19 01 	sts	0x0119, r15
					setBothMotorsRpm(set_PulsesRef);
    127e:	8a e0       	ldi	r24, 0x0A	; 10
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	0e 94 61 01 	call	0x2c2	; 0x2c2 <setBothMotorsRpm>
				stage=findLine;}
    1286:	50 92 3e 01 	sts	0x013E, r5
    128a:	b8 cf       	rjmp	.-144    	; 0x11fc <main+0x10a>
				break;
				//////////////////////////////////////////////////////
				case loop:
				if (sensFull()==1)
    128c:	0e 94 31 01 	call	0x262	; 0x262 <sensFull>
    1290:	01 97       	sbiw	r24, 0x01	; 1
    1292:	19 f4       	brne	.+6      	; 0x129a <main+0x1a8>
				{

					stage=stop;
    1294:	20 92 3e 01 	sts	0x013E, r2
    1298:	b1 cf       	rjmp	.-158    	; 0x11fc <main+0x10a>
				}
				else
				{
					set_PulsesRef=10;
    129a:	c0 92 16 01 	sts	0x0116, r12
    129e:	d0 92 17 01 	sts	0x0117, r13
    12a2:	e0 92 18 01 	sts	0x0118, r14
    12a6:	f0 92 19 01 	sts	0x0119, r15
					followLine();
    12aa:	0e 94 92 05 	call	0xb24	; 0xb24 <followLine>
					stage=loop;
    12ae:	00 93 3e 01 	sts	0x013E, r16
    12b2:	a4 cf       	rjmp	.-184    	; 0x11fc <main+0x10a>
				}
				break;
				//////////////////////////////////////////////////////
				case stop:
				pulsesAturn=0;
    12b4:	10 92 f8 00 	sts	0x00F8, r1
    12b8:	10 92 f9 00 	sts	0x00F9, r1
    12bc:	10 92 fa 00 	sts	0x00FA, r1
    12c0:	10 92 fb 00 	sts	0x00FB, r1
				flagA=1;
    12c4:	d0 93 03 01 	sts	0x0103, r29
    12c8:	c0 93 02 01 	sts	0x0102, r28
				while (pulsesAturn<300)
				{
					forwardAB();
    12cc:	0e 94 a1 00 	call	0x142	; 0x142 <forwardAB>
					set_PulsesRef=10;
    12d0:	c0 92 16 01 	sts	0x0116, r12
    12d4:	d0 92 17 01 	sts	0x0117, r13
    12d8:	e0 92 18 01 	sts	0x0118, r14
    12dc:	f0 92 19 01 	sts	0x0119, r15
					followLine();
    12e0:	0e 94 92 05 	call	0xb24	; 0xb24 <followLine>
				break;
				//////////////////////////////////////////////////////
				case stop:
				pulsesAturn=0;
				flagA=1;
				while (pulsesAturn<300)
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	46 e9       	ldi	r20, 0x96	; 150
    12ea:	53 e4       	ldi	r21, 0x43	; 67
    12ec:	60 91 f8 00 	lds	r22, 0x00F8
    12f0:	70 91 f9 00 	lds	r23, 0x00F9
    12f4:	80 91 fa 00 	lds	r24, 0x00FA
    12f8:	90 91 fb 00 	lds	r25, 0x00FB
    12fc:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__cmpsf2>
    1300:	88 23       	and	r24, r24
    1302:	24 f3       	brlt	.-56     	; 0x12cc <main+0x1da>
					set_PulsesRef=10;
					followLine();
					//set_PulsesRef=10;
					//setBothMotorsRpm(set_PulsesRef);
				}
				pulsesAturn=0;
    1304:	10 92 f8 00 	sts	0x00F8, r1
    1308:	10 92 f9 00 	sts	0x00F9, r1
    130c:	10 92 fa 00 	sts	0x00FA, r1
    1310:	10 92 fb 00 	sts	0x00FB, r1
				counter=1;
    1314:	d0 93 f7 00 	sts	0x00F7, r29
    1318:	c0 93 f6 00 	sts	0x00F6, r28
				while(fifm<128){
    131c:	80 91 f4 00 	lds	r24, 0x00F4
    1320:	90 91 f5 00 	lds	r25, 0x00F5
    1324:	80 38       	cpi	r24, 0x80	; 128
    1326:	91 05       	cpc	r25, r1
    1328:	5c f4       	brge	.+22     	; 0x1340 <main+0x24e>
					stopA();stopB();
    132a:	0e 94 bd 00 	call	0x17a	; 0x17a <stopA>
    132e:	0e 94 ba 00 	call	0x174	; 0x174 <stopB>
					//set_PulsesRef=10;
					//setBothMotorsRpm(set_PulsesRef);
				}
				pulsesAturn=0;
				counter=1;
				while(fifm<128){
    1332:	80 91 f4 00 	lds	r24, 0x00F4
    1336:	90 91 f5 00 	lds	r25, 0x00F5
    133a:	80 38       	cpi	r24, 0x80	; 128
    133c:	91 05       	cpc	r25, r1
    133e:	ac f3       	brlt	.-22     	; 0x132a <main+0x238>
					stopA();stopB();
				}
				counter=0;
    1340:	10 92 f7 00 	sts	0x00F7, r1
    1344:	10 92 f6 00 	sts	0x00F6, r1
				fifm=0;
    1348:	10 92 f5 00 	sts	0x00F5, r1
    134c:	10 92 f4 00 	sts	0x00F4, r1
				

				make90R();
    1350:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <make90R>
				counter=1;
    1354:	d0 93 f7 00 	sts	0x00F7, r29
    1358:	c0 93 f6 00 	sts	0x00F6, r28
				while(fifm<66){
    135c:	80 91 f4 00 	lds	r24, 0x00F4
    1360:	90 91 f5 00 	lds	r25, 0x00F5
    1364:	82 34       	cpi	r24, 0x42	; 66
    1366:	91 05       	cpc	r25, r1
    1368:	0c f0       	brlt	.+2      	; 0x136c <main+0x27a>
    136a:	ec c2       	rjmp	.+1496   	; 0x1944 <main+0x852>
					stopA();stopB();
    136c:	0e 94 bd 00 	call	0x17a	; 0x17a <stopA>
    1370:	0e 94 ba 00 	call	0x174	; 0x174 <stopB>
				fifm=0;
				

				make90R();
				counter=1;
				while(fifm<66){
    1374:	80 91 f4 00 	lds	r24, 0x00F4
    1378:	90 91 f5 00 	lds	r25, 0x00F5
    137c:	82 34       	cpi	r24, 0x42	; 66
    137e:	91 05       	cpc	r25, r1
    1380:	ac f3       	brlt	.-22     	; 0x136c <main+0x27a>
					stopA();stopB();
				}
				counter=0;
    1382:	10 92 f7 00 	sts	0x00F7, r1
    1386:	10 92 f6 00 	sts	0x00F6, r1
				fifm=0;
    138a:	10 92 f5 00 	sts	0x00F5, r1
    138e:	10 92 f4 00 	sts	0x00F4, r1
				flagA=1;
    1392:	d0 93 03 01 	sts	0x0103, r29
    1396:	c0 93 02 01 	sts	0x0102, r28
				pulsesAturn=0;
    139a:	10 92 f8 00 	sts	0x00F8, r1
    139e:	10 92 f9 00 	sts	0x00F9, r1
    13a2:	10 92 fa 00 	sts	0x00FA, r1
    13a6:	10 92 fb 00 	sts	0x00FB, r1
				while (pulsesAturn<100)
				{
					backwardsAB();
    13aa:	0e 94 a6 00 	call	0x14c	; 0x14c <backwardsAB>
					set_PulsesRef=5;
    13ae:	80 92 16 01 	sts	0x0116, r8
    13b2:	90 92 17 01 	sts	0x0117, r9
    13b6:	a0 92 18 01 	sts	0x0118, r10
    13ba:	b0 92 19 01 	sts	0x0119, r11
					setBothMotorsRpm(set_PulsesRef);
    13be:	85 e0       	ldi	r24, 0x05	; 5
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	0e 94 61 01 	call	0x2c2	; 0x2c2 <setBothMotorsRpm>
				}
				counter=0;
				fifm=0;
				flagA=1;
				pulsesAturn=0;
				while (pulsesAturn<100)
    13c6:	20 e0       	ldi	r18, 0x00	; 0
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	48 ec       	ldi	r20, 0xC8	; 200
    13cc:	52 e4       	ldi	r21, 0x42	; 66
    13ce:	60 91 f8 00 	lds	r22, 0x00F8
    13d2:	70 91 f9 00 	lds	r23, 0x00F9
    13d6:	80 91 fa 00 	lds	r24, 0x00FA
    13da:	90 91 fb 00 	lds	r25, 0x00FB
    13de:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__cmpsf2>
    13e2:	88 23       	and	r24, r24
    13e4:	14 f3       	brlt	.-60     	; 0x13aa <main+0x2b8>
				{
					backwardsAB();
					set_PulsesRef=5;
					setBothMotorsRpm(set_PulsesRef);
				}
				pulsesAturn=0;
    13e6:	10 92 f8 00 	sts	0x00F8, r1
    13ea:	10 92 f9 00 	sts	0x00F9, r1
    13ee:	10 92 fa 00 	sts	0x00FA, r1
    13f2:	10 92 fb 00 	sts	0x00FB, r1
				flagA=0;
    13f6:	10 92 03 01 	sts	0x0103, r1
    13fa:	10 92 02 01 	sts	0x0102, r1
				stage= circle;
    13fe:	70 92 3e 01 	sts	0x013E, r7
				counter=1;
    1402:	d0 93 f7 00 	sts	0x00F7, r29
    1406:	c0 93 f6 00 	sts	0x00F6, r28
				break;
    140a:	f8 ce       	rjmp	.-528    	; 0x11fc <main+0x10a>
				//////////////////////////////////////////////////////
				case circle:
				//forwardAB();
				
				if(fifm<402){
    140c:	80 91 f4 00 	lds	r24, 0x00F4
    1410:	90 91 f5 00 	lds	r25, 0x00F5
    1414:	82 39       	cpi	r24, 0x92	; 146
    1416:	91 40       	sbci	r25, 0x01	; 1
    1418:	1c f4       	brge	.+6      	; 0x1420 <main+0x32e>
					makeCircle();
    141a:	0e 94 60 08 	call	0x10c0	; 0x10c0 <makeCircle>
    141e:	ee ce       	rjmp	.-548    	; 0x11fc <main+0x10a>
				}else
				{
					makeCircle();
    1420:	0e 94 60 08 	call	0x10c0	; 0x10c0 <makeCircle>
					if(sensFull()==1){
    1424:	0e 94 31 01 	call	0x262	; 0x262 <sensFull>
    1428:	01 97       	sbiw	r24, 0x01	; 1
    142a:	09 f0       	breq	.+2      	; 0x142e <main+0x33c>
    142c:	e7 ce       	rjmp	.-562    	; 0x11fc <main+0x10a>
						make90L();
    142e:	0e 94 3f 02 	call	0x47e	; 0x47e <make90L>
						counter=0;
    1432:	10 92 f7 00 	sts	0x00F7, r1
    1436:	10 92 f6 00 	sts	0x00F6, r1
						fifm=0;
    143a:	10 92 f5 00 	sts	0x00F5, r1
    143e:	10 92 f4 00 	sts	0x00F4, r1
						stage=follow2;
    1442:	40 92 3e 01 	sts	0x013E, r4
    1446:	da ce       	rjmp	.-588    	; 0x11fc <main+0x10a>
				
				//stage=follow;
				break;
				//////////////////////////////////////////////////////
				case follow:
				if (sensFull()==1)
    1448:	0e 94 31 01 	call	0x262	; 0x262 <sensFull>
    144c:	01 97       	sbiw	r24, 0x01	; 1
    144e:	19 f4       	brne	.+6      	; 0x1456 <main+0x364>
				{
					
					stage=wall;
    1450:	30 92 3e 01 	sts	0x013E, r3
    1454:	d3 ce       	rjmp	.-602    	; 0x11fc <main+0x10a>
					}else{
					set_PulsesRef=10;
    1456:	c0 92 16 01 	sts	0x0116, r12
    145a:	d0 92 17 01 	sts	0x0117, r13
    145e:	e0 92 18 01 	sts	0x0118, r14
    1462:	f0 92 19 01 	sts	0x0119, r15
					followLine();
    1466:	0e 94 92 05 	call	0xb24	; 0xb24 <followLine>
					
					stage=follow;
    146a:	60 92 3e 01 	sts	0x013E, r6
    146e:	c6 ce       	rjmp	.-628    	; 0x11fc <main+0x10a>
				}
				break;
				//////////////////////////////////////////////////////
						case follow2:
						if (sensFull()==1)
    1470:	0e 94 31 01 	call	0x262	; 0x262 <sensFull>
    1474:	01 97       	sbiw	r24, 0x01	; 1
    1476:	39 f5       	brne	.+78     	; 0x14c6 <main+0x3d4>
						{
											counter=1;
    1478:	d0 93 f7 00 	sts	0x00F7, r29
    147c:	c0 93 f6 00 	sts	0x00F6, r28
											while(fifm<126){
    1480:	80 91 f4 00 	lds	r24, 0x00F4
    1484:	90 91 f5 00 	lds	r25, 0x00F5
    1488:	8e 37       	cpi	r24, 0x7E	; 126
    148a:	91 05       	cpc	r25, r1
    148c:	8c f4       	brge	.+34     	; 0x14b0 <main+0x3be>
												set_PulsesRef=10;
    148e:	c0 92 16 01 	sts	0x0116, r12
    1492:	d0 92 17 01 	sts	0x0117, r13
    1496:	e0 92 18 01 	sts	0x0118, r14
    149a:	f0 92 19 01 	sts	0x0119, r15
												followLine();
    149e:	0e 94 92 05 	call	0xb24	; 0xb24 <followLine>
				//////////////////////////////////////////////////////
						case follow2:
						if (sensFull()==1)
						{
											counter=1;
											while(fifm<126){
    14a2:	80 91 f4 00 	lds	r24, 0x00F4
    14a6:	90 91 f5 00 	lds	r25, 0x00F5
    14aa:	8e 37       	cpi	r24, 0x7E	; 126
    14ac:	91 05       	cpc	r25, r1
    14ae:	7c f3       	brlt	.-34     	; 0x148e <main+0x39c>
												set_PulsesRef=10;
												followLine();
											}
											counter=0;
    14b0:	10 92 f7 00 	sts	0x00F7, r1
    14b4:	10 92 f6 00 	sts	0x00F6, r1
											fifm=0;	
    14b8:	10 92 f5 00 	sts	0x00F5, r1
    14bc:	10 92 f4 00 	sts	0x00F4, r1
									
									
							stage=follow;
    14c0:	60 92 3e 01 	sts	0x013E, r6
    14c4:	9b ce       	rjmp	.-714    	; 0x11fc <main+0x10a>
							}else{
							set_PulsesRef=10;
    14c6:	c0 92 16 01 	sts	0x0116, r12
    14ca:	d0 92 17 01 	sts	0x0117, r13
    14ce:	e0 92 18 01 	sts	0x0118, r14
    14d2:	f0 92 19 01 	sts	0x0119, r15
							followLine();
    14d6:	0e 94 92 05 	call	0xb24	; 0xb24 <followLine>
							
							stage=follow2;
    14da:	40 92 3e 01 	sts	0x013E, r4
    14de:	8e ce       	rjmp	.-740    	; 0x11fc <main+0x10a>
						}
						break;
				////////////////////////////////////////////////////
				case wall:
				/////// wait 3 sec
				counter=1;
    14e0:	d0 93 f7 00 	sts	0x00F7, r29
    14e4:	c0 93 f6 00 	sts	0x00F6, r28
				while(fifm<198){
    14e8:	80 91 f4 00 	lds	r24, 0x00F4
    14ec:	90 91 f5 00 	lds	r25, 0x00F5
    14f0:	86 3c       	cpi	r24, 0xC6	; 198
    14f2:	91 05       	cpc	r25, r1
    14f4:	5c f4       	brge	.+22     	; 0x150c <main+0x41a>
					stopA();stopB();
    14f6:	0e 94 bd 00 	call	0x17a	; 0x17a <stopA>
    14fa:	0e 94 ba 00 	call	0x174	; 0x174 <stopB>
						break;
				////////////////////////////////////////////////////
				case wall:
				/////// wait 3 sec
				counter=1;
				while(fifm<198){
    14fe:	80 91 f4 00 	lds	r24, 0x00F4
    1502:	90 91 f5 00 	lds	r25, 0x00F5
    1506:	86 3c       	cpi	r24, 0xC6	; 198
    1508:	91 05       	cpc	r25, r1
    150a:	ac f3       	brlt	.-22     	; 0x14f6 <main+0x404>
					stopA();stopB();
				}
				counter=0;
    150c:	10 92 f7 00 	sts	0x00F7, r1
    1510:	10 92 f6 00 	sts	0x00F6, r1
				fifm=0;
    1514:	10 92 f5 00 	sts	0x00F5, r1
    1518:	10 92 f4 00 	sts	0x00F4, r1
				///first forward
				pulsesAturn=0;
    151c:	10 92 f8 00 	sts	0x00F8, r1
    1520:	10 92 f9 00 	sts	0x00F9, r1
    1524:	10 92 fa 00 	sts	0x00FA, r1
    1528:	10 92 fb 00 	sts	0x00FB, r1
				flagA=1;
    152c:	d0 93 03 01 	sts	0x0103, r29
    1530:	c0 93 02 01 	sts	0x0102, r28
				while (pulsesAturn<500)
				{
					forwardAB();
    1534:	0e 94 a1 00 	call	0x142	; 0x142 <forwardAB>
					set_PulsesRef=10;
    1538:	c0 92 16 01 	sts	0x0116, r12
    153c:	d0 92 17 01 	sts	0x0117, r13
    1540:	e0 92 18 01 	sts	0x0118, r14
    1544:	f0 92 19 01 	sts	0x0119, r15
					setBothMotorsRpm(set_PulsesRef);
    1548:	8a e0       	ldi	r24, 0x0A	; 10
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <setBothMotorsRpm>
				counter=0;
				fifm=0;
				///first forward
				pulsesAturn=0;
				flagA=1;
				while (pulsesAturn<500)
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	4a ef       	ldi	r20, 0xFA	; 250
    1556:	53 e4       	ldi	r21, 0x43	; 67
    1558:	60 91 f8 00 	lds	r22, 0x00F8
    155c:	70 91 f9 00 	lds	r23, 0x00F9
    1560:	80 91 fa 00 	lds	r24, 0x00FA
    1564:	90 91 fb 00 	lds	r25, 0x00FB
    1568:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__cmpsf2>
    156c:	88 23       	and	r24, r24
    156e:	14 f3       	brlt	.-60     	; 0x1534 <main+0x442>
				{
					forwardAB();
					set_PulsesRef=10;
					setBothMotorsRpm(set_PulsesRef);
				}
				flagA=0;
    1570:	10 92 03 01 	sts	0x0103, r1
    1574:	10 92 02 01 	sts	0x0102, r1
				pulsesAturn=0;
    1578:	10 92 f8 00 	sts	0x00F8, r1
    157c:	10 92 f9 00 	sts	0x00F9, r1
    1580:	10 92 fa 00 	sts	0x00FA, r1
    1584:	10 92 fb 00 	sts	0x00FB, r1
				
				// first left
				pulsesAturn=0;
				counter=1;
    1588:	d0 93 f7 00 	sts	0x00F7, r29
    158c:	c0 93 f6 00 	sts	0x00F6, r28
				while(fifm<128){
    1590:	80 91 f4 00 	lds	r24, 0x00F4
    1594:	90 91 f5 00 	lds	r25, 0x00F5
    1598:	80 38       	cpi	r24, 0x80	; 128
    159a:	91 05       	cpc	r25, r1
    159c:	5c f4       	brge	.+22     	; 0x15b4 <main+0x4c2>
					stopA();stopB();
    159e:	0e 94 bd 00 	call	0x17a	; 0x17a <stopA>
    15a2:	0e 94 ba 00 	call	0x174	; 0x174 <stopB>
				pulsesAturn=0;
				
				// first left
				pulsesAturn=0;
				counter=1;
				while(fifm<128){
    15a6:	80 91 f4 00 	lds	r24, 0x00F4
    15aa:	90 91 f5 00 	lds	r25, 0x00F5
    15ae:	80 38       	cpi	r24, 0x80	; 128
    15b0:	91 05       	cpc	r25, r1
    15b2:	ac f3       	brlt	.-22     	; 0x159e <main+0x4ac>
					stopA();stopB();
				}
				counter=0;
    15b4:	10 92 f7 00 	sts	0x00F7, r1
    15b8:	10 92 f6 00 	sts	0x00F6, r1
				fifm=0;
    15bc:	10 92 f5 00 	sts	0x00F5, r1
    15c0:	10 92 f4 00 	sts	0x00F4, r1
				make90R();
    15c4:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <make90R>
				counter=1;
    15c8:	d0 93 f7 00 	sts	0x00F7, r29
    15cc:	c0 93 f6 00 	sts	0x00F6, r28
				while(fifm<128){
    15d0:	80 91 f4 00 	lds	r24, 0x00F4
    15d4:	90 91 f5 00 	lds	r25, 0x00F5
    15d8:	80 38       	cpi	r24, 0x80	; 128
    15da:	91 05       	cpc	r25, r1
    15dc:	5c f4       	brge	.+22     	; 0x15f4 <main+0x502>
					stopA();stopB();
    15de:	0e 94 bd 00 	call	0x17a	; 0x17a <stopA>
    15e2:	0e 94 ba 00 	call	0x174	; 0x174 <stopB>
				}
				counter=0;
				fifm=0;
				make90R();
				counter=1;
				while(fifm<128){
    15e6:	80 91 f4 00 	lds	r24, 0x00F4
    15ea:	90 91 f5 00 	lds	r25, 0x00F5
    15ee:	80 38       	cpi	r24, 0x80	; 128
    15f0:	91 05       	cpc	r25, r1
    15f2:	ac f3       	brlt	.-22     	; 0x15de <main+0x4ec>
					stopA();stopB();
				}
				counter=0;
    15f4:	10 92 f7 00 	sts	0x00F7, r1
    15f8:	10 92 f6 00 	sts	0x00F6, r1
				fifm=0;
    15fc:	10 92 f5 00 	sts	0x00F5, r1
    1600:	10 92 f4 00 	sts	0x00F4, r1
				/////// forward 2
								pulsesAturn=0;
    1604:	10 92 f8 00 	sts	0x00F8, r1
    1608:	10 92 f9 00 	sts	0x00F9, r1
    160c:	10 92 fa 00 	sts	0x00FA, r1
    1610:	10 92 fb 00 	sts	0x00FB, r1
								flagA=1;
    1614:	d0 93 03 01 	sts	0x0103, r29
    1618:	c0 93 02 01 	sts	0x0102, r28
								while (pulsesAturn<500)
								{
									forwardAB();
    161c:	0e 94 a1 00 	call	0x142	; 0x142 <forwardAB>
									set_PulsesRef=10;
    1620:	c0 92 16 01 	sts	0x0116, r12
    1624:	d0 92 17 01 	sts	0x0117, r13
    1628:	e0 92 18 01 	sts	0x0118, r14
    162c:	f0 92 19 01 	sts	0x0119, r15
									setBothMotorsRpm(set_PulsesRef);
    1630:	8a e0       	ldi	r24, 0x0A	; 10
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	0e 94 61 01 	call	0x2c2	; 0x2c2 <setBothMotorsRpm>
				counter=0;
				fifm=0;
				/////// forward 2
								pulsesAturn=0;
								flagA=1;
								while (pulsesAturn<500)
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	4a ef       	ldi	r20, 0xFA	; 250
    163e:	53 e4       	ldi	r21, 0x43	; 67
    1640:	60 91 f8 00 	lds	r22, 0x00F8
    1644:	70 91 f9 00 	lds	r23, 0x00F9
    1648:	80 91 fa 00 	lds	r24, 0x00FA
    164c:	90 91 fb 00 	lds	r25, 0x00FB
    1650:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__cmpsf2>
    1654:	88 23       	and	r24, r24
    1656:	14 f3       	brlt	.-60     	; 0x161c <main+0x52a>
								{
									forwardAB();
									set_PulsesRef=10;
									setBothMotorsRpm(set_PulsesRef);
								}
								flagA=0;
    1658:	10 92 03 01 	sts	0x0103, r1
    165c:	10 92 02 01 	sts	0x0102, r1
								pulsesAturn=0;
    1660:	10 92 f8 00 	sts	0x00F8, r1
    1664:	10 92 f9 00 	sts	0x00F9, r1
    1668:	10 92 fa 00 	sts	0x00FA, r1
    166c:	10 92 fb 00 	sts	0x00FB, r1
				/////// left turn
								pulsesAturn=0;
								counter=1;
    1670:	d0 93 f7 00 	sts	0x00F7, r29
    1674:	c0 93 f6 00 	sts	0x00F6, r28
								while(fifm<128){
    1678:	80 91 f4 00 	lds	r24, 0x00F4
    167c:	90 91 f5 00 	lds	r25, 0x00F5
    1680:	80 38       	cpi	r24, 0x80	; 128
    1682:	91 05       	cpc	r25, r1
    1684:	5c f4       	brge	.+22     	; 0x169c <main+0x5aa>
									stopA();stopB();
    1686:	0e 94 bd 00 	call	0x17a	; 0x17a <stopA>
    168a:	0e 94 ba 00 	call	0x174	; 0x174 <stopB>
								flagA=0;
								pulsesAturn=0;
				/////// left turn
								pulsesAturn=0;
								counter=1;
								while(fifm<128){
    168e:	80 91 f4 00 	lds	r24, 0x00F4
    1692:	90 91 f5 00 	lds	r25, 0x00F5
    1696:	80 38       	cpi	r24, 0x80	; 128
    1698:	91 05       	cpc	r25, r1
    169a:	ac f3       	brlt	.-22     	; 0x1686 <main+0x594>
									stopA();stopB();
								}
								counter=0;
    169c:	10 92 f7 00 	sts	0x00F7, r1
    16a0:	10 92 f6 00 	sts	0x00F6, r1
								fifm=0;
    16a4:	10 92 f5 00 	sts	0x00F5, r1
    16a8:	10 92 f4 00 	sts	0x00F4, r1
								make90L();
    16ac:	0e 94 3f 02 	call	0x47e	; 0x47e <make90L>
								counter=1;
    16b0:	d0 93 f7 00 	sts	0x00F7, r29
    16b4:	c0 93 f6 00 	sts	0x00F6, r28
								while(fifm<128){
    16b8:	80 91 f4 00 	lds	r24, 0x00F4
    16bc:	90 91 f5 00 	lds	r25, 0x00F5
    16c0:	80 38       	cpi	r24, 0x80	; 128
    16c2:	91 05       	cpc	r25, r1
    16c4:	5c f4       	brge	.+22     	; 0x16dc <main+0x5ea>
									stopA();stopB();
    16c6:	0e 94 bd 00 	call	0x17a	; 0x17a <stopA>
    16ca:	0e 94 ba 00 	call	0x174	; 0x174 <stopB>
								}
								counter=0;
								fifm=0;
								make90L();
								counter=1;
								while(fifm<128){
    16ce:	80 91 f4 00 	lds	r24, 0x00F4
    16d2:	90 91 f5 00 	lds	r25, 0x00F5
    16d6:	80 38       	cpi	r24, 0x80	; 128
    16d8:	91 05       	cpc	r25, r1
    16da:	ac f3       	brlt	.-22     	; 0x16c6 <main+0x5d4>
									stopA();stopB();
								}
								counter=0;
    16dc:	10 92 f7 00 	sts	0x00F7, r1
    16e0:	10 92 f6 00 	sts	0x00F6, r1
								fifm=0;
    16e4:	10 92 f5 00 	sts	0x00F5, r1
    16e8:	10 92 f4 00 	sts	0x00F4, r1
				////// more forward 
										pulsesAturn=0;
    16ec:	10 92 f8 00 	sts	0x00F8, r1
    16f0:	10 92 f9 00 	sts	0x00F9, r1
    16f4:	10 92 fa 00 	sts	0x00FA, r1
    16f8:	10 92 fb 00 	sts	0x00FB, r1
										flagA=1;
    16fc:	d0 93 03 01 	sts	0x0103, r29
    1700:	c0 93 02 01 	sts	0x0102, r28
										while (pulsesAturn<500)
										{
											forwardAB();
    1704:	0e 94 a1 00 	call	0x142	; 0x142 <forwardAB>
											set_PulsesRef=10;
    1708:	c0 92 16 01 	sts	0x0116, r12
    170c:	d0 92 17 01 	sts	0x0117, r13
    1710:	e0 92 18 01 	sts	0x0118, r14
    1714:	f0 92 19 01 	sts	0x0119, r15
											setBothMotorsRpm(set_PulsesRef);
    1718:	8a e0       	ldi	r24, 0x0A	; 10
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <setBothMotorsRpm>
								counter=0;
								fifm=0;
				////// more forward 
										pulsesAturn=0;
										flagA=1;
										while (pulsesAturn<500)
    1720:	20 e0       	ldi	r18, 0x00	; 0
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	4a ef       	ldi	r20, 0xFA	; 250
    1726:	53 e4       	ldi	r21, 0x43	; 67
    1728:	60 91 f8 00 	lds	r22, 0x00F8
    172c:	70 91 f9 00 	lds	r23, 0x00F9
    1730:	80 91 fa 00 	lds	r24, 0x00FA
    1734:	90 91 fb 00 	lds	r25, 0x00FB
    1738:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__cmpsf2>
    173c:	88 23       	and	r24, r24
    173e:	14 f3       	brlt	.-60     	; 0x1704 <main+0x612>
										{
											forwardAB();
											set_PulsesRef=10;
											setBothMotorsRpm(set_PulsesRef);
										}
										flagA=0;
    1740:	10 92 03 01 	sts	0x0103, r1
    1744:	10 92 02 01 	sts	0x0102, r1
										pulsesAturn=0;
    1748:	10 92 f8 00 	sts	0x00F8, r1
    174c:	10 92 f9 00 	sts	0x00F9, r1
    1750:	10 92 fa 00 	sts	0x00FA, r1
    1754:	10 92 fb 00 	sts	0x00FB, r1
										
			////////  LEFT MORE
										counter=0;
    1758:	10 92 f7 00 	sts	0x00F7, r1
    175c:	10 92 f6 00 	sts	0x00F6, r1
										fifm=0;
    1760:	10 92 f5 00 	sts	0x00F5, r1
    1764:	10 92 f4 00 	sts	0x00F4, r1
										

										make90L();
    1768:	0e 94 3f 02 	call	0x47e	; 0x47e <make90L>
										counter=1;
    176c:	d0 93 f7 00 	sts	0x00F7, r29
    1770:	c0 93 f6 00 	sts	0x00F6, r28
										while(fifm<66){
    1774:	80 91 f4 00 	lds	r24, 0x00F4
    1778:	90 91 f5 00 	lds	r25, 0x00F5
    177c:	82 34       	cpi	r24, 0x42	; 66
    177e:	91 05       	cpc	r25, r1
    1780:	5c f4       	brge	.+22     	; 0x1798 <main+0x6a6>
											stopA();stopB();
    1782:	0e 94 bd 00 	call	0x17a	; 0x17a <stopA>
    1786:	0e 94 ba 00 	call	0x174	; 0x174 <stopB>
										fifm=0;
										

										make90L();
										counter=1;
										while(fifm<66){
    178a:	80 91 f4 00 	lds	r24, 0x00F4
    178e:	90 91 f5 00 	lds	r25, 0x00F5
    1792:	82 34       	cpi	r24, 0x42	; 66
    1794:	91 05       	cpc	r25, r1
    1796:	ac f3       	brlt	.-22     	; 0x1782 <main+0x690>
											stopA();stopB();
										}
										counter=0;
    1798:	10 92 f7 00 	sts	0x00F7, r1
    179c:	10 92 f6 00 	sts	0x00F6, r1
										fifm=0;
    17a0:	10 92 f5 00 	sts	0x00F5, r1
    17a4:	10 92 f4 00 	sts	0x00F4, r1
				
				//////    	more forward
				pulsesAturn=0;
    17a8:	10 92 f8 00 	sts	0x00F8, r1
    17ac:	10 92 f9 00 	sts	0x00F9, r1
    17b0:	10 92 fa 00 	sts	0x00FA, r1
    17b4:	10 92 fb 00 	sts	0x00FB, r1
				flagA=1;
    17b8:	d0 93 03 01 	sts	0x0103, r29
    17bc:	c0 93 02 01 	sts	0x0102, r28
				while (pulsesAturn<300)
				{
					forwardAB();
    17c0:	0e 94 a1 00 	call	0x142	; 0x142 <forwardAB>
					set_PulsesRef=10;	
    17c4:	c0 92 16 01 	sts	0x0116, r12
    17c8:	d0 92 17 01 	sts	0x0117, r13
    17cc:	e0 92 18 01 	sts	0x0118, r14
    17d0:	f0 92 19 01 	sts	0x0119, r15
					setBothMotorsRpm(set_PulsesRef);
    17d4:	8a e0       	ldi	r24, 0x0A	; 10
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	0e 94 61 01 	call	0x2c2	; 0x2c2 <setBothMotorsRpm>
										fifm=0;
				
				//////    	more forward
				pulsesAturn=0;
				flagA=1;
				while (pulsesAturn<300)
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	46 e9       	ldi	r20, 0x96	; 150
    17e2:	53 e4       	ldi	r21, 0x43	; 67
    17e4:	60 91 f8 00 	lds	r22, 0x00F8
    17e8:	70 91 f9 00 	lds	r23, 0x00F9
    17ec:	80 91 fa 00 	lds	r24, 0x00FA
    17f0:	90 91 fb 00 	lds	r25, 0x00FB
    17f4:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__cmpsf2>
    17f8:	88 23       	and	r24, r24
    17fa:	14 f3       	brlt	.-60     	; 0x17c0 <main+0x6ce>
				{
					forwardAB();
					set_PulsesRef=10;	
					setBothMotorsRpm(set_PulsesRef);
				}
				pulsesAturn=0;		
    17fc:	10 92 f8 00 	sts	0x00F8, r1
    1800:	10 92 f9 00 	sts	0x00F9, r1
    1804:	10 92 fa 00 	sts	0x00FA, r1
    1808:	10 92 fb 00 	sts	0x00FB, r1
				//// right  last time 
				pulsesAturn=0;
				counter=1;
    180c:	d0 93 f7 00 	sts	0x00F7, r29
    1810:	c0 93 f6 00 	sts	0x00F6, r28
				while(fifm<128){
    1814:	80 91 f4 00 	lds	r24, 0x00F4
    1818:	90 91 f5 00 	lds	r25, 0x00F5
    181c:	80 38       	cpi	r24, 0x80	; 128
    181e:	91 05       	cpc	r25, r1
    1820:	5c f4       	brge	.+22     	; 0x1838 <main+0x746>
					stopA();stopB();
    1822:	0e 94 bd 00 	call	0x17a	; 0x17a <stopA>
    1826:	0e 94 ba 00 	call	0x174	; 0x174 <stopB>
				}
				pulsesAturn=0;		
				//// right  last time 
				pulsesAturn=0;
				counter=1;
				while(fifm<128){
    182a:	80 91 f4 00 	lds	r24, 0x00F4
    182e:	90 91 f5 00 	lds	r25, 0x00F5
    1832:	80 38       	cpi	r24, 0x80	; 128
    1834:	91 05       	cpc	r25, r1
    1836:	ac f3       	brlt	.-22     	; 0x1822 <main+0x730>
					stopA();stopB();
				}
				counter=0;
    1838:	10 92 f7 00 	sts	0x00F7, r1
    183c:	10 92 f6 00 	sts	0x00F6, r1
				fifm=0;
    1840:	10 92 f5 00 	sts	0x00F5, r1
    1844:	10 92 f4 00 	sts	0x00F4, r1
				make90R();
    1848:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <make90R>
				counter=1;
    184c:	d0 93 f7 00 	sts	0x00F7, r29
    1850:	c0 93 f6 00 	sts	0x00F6, r28
				while(fifm<66){
    1854:	80 91 f4 00 	lds	r24, 0x00F4
    1858:	90 91 f5 00 	lds	r25, 0x00F5
    185c:	82 34       	cpi	r24, 0x42	; 66
    185e:	91 05       	cpc	r25, r1
    1860:	5c f4       	brge	.+22     	; 0x1878 <main+0x786>
					stopA();stopB();
    1862:	0e 94 bd 00 	call	0x17a	; 0x17a <stopA>
    1866:	0e 94 ba 00 	call	0x174	; 0x174 <stopB>
				}
				counter=0;
				fifm=0;
				make90R();
				counter=1;
				while(fifm<66){
    186a:	80 91 f4 00 	lds	r24, 0x00F4
    186e:	90 91 f5 00 	lds	r25, 0x00F5
    1872:	82 34       	cpi	r24, 0x42	; 66
    1874:	91 05       	cpc	r25, r1
    1876:	ac f3       	brlt	.-22     	; 0x1862 <main+0x770>
					stopA();stopB();
				}
				counter=0;
    1878:	10 92 f7 00 	sts	0x00F7, r1
    187c:	10 92 f6 00 	sts	0x00F6, r1
				fifm=0;
    1880:	10 92 f5 00 	sts	0x00F5, r1
    1884:	10 92 f4 00 	sts	0x00F4, r1
				
					//////    	more forward last time
					pulsesAturn=0;
    1888:	10 92 f8 00 	sts	0x00F8, r1
    188c:	10 92 f9 00 	sts	0x00F9, r1
    1890:	10 92 fa 00 	sts	0x00FA, r1
    1894:	10 92 fb 00 	sts	0x00FB, r1
					flagA=1;
    1898:	d0 93 03 01 	sts	0x0103, r29
    189c:	c0 93 02 01 	sts	0x0102, r28
					while (pulsesAturn<300)
					{
						forwardAB();
    18a0:	0e 94 a1 00 	call	0x142	; 0x142 <forwardAB>
						set_PulsesRef=10;
    18a4:	c0 92 16 01 	sts	0x0116, r12
    18a8:	d0 92 17 01 	sts	0x0117, r13
    18ac:	e0 92 18 01 	sts	0x0118, r14
    18b0:	f0 92 19 01 	sts	0x0119, r15
						setBothMotorsRpm(set_PulsesRef);
    18b4:	8a e0       	ldi	r24, 0x0A	; 10
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	0e 94 61 01 	call	0x2c2	; 0x2c2 <setBothMotorsRpm>
				fifm=0;
				
					//////    	more forward last time
					pulsesAturn=0;
					flagA=1;
					while (pulsesAturn<300)
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	46 e9       	ldi	r20, 0x96	; 150
    18c2:	53 e4       	ldi	r21, 0x43	; 67
    18c4:	60 91 f8 00 	lds	r22, 0x00F8
    18c8:	70 91 f9 00 	lds	r23, 0x00F9
    18cc:	80 91 fa 00 	lds	r24, 0x00FA
    18d0:	90 91 fb 00 	lds	r25, 0x00FB
    18d4:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__cmpsf2>
    18d8:	88 23       	and	r24, r24
    18da:	14 f3       	brlt	.-60     	; 0x18a0 <main+0x7ae>
					{
						forwardAB();
						set_PulsesRef=10;
						setBothMotorsRpm(set_PulsesRef);
					}
					pulsesAturn=0;
    18dc:	10 92 f8 00 	sts	0x00F8, r1
    18e0:	10 92 f9 00 	sts	0x00F9, r1
    18e4:	10 92 fa 00 	sts	0x00FA, r1
    18e8:	10 92 fb 00 	sts	0x00FB, r1
						
				stage=test;
    18ec:	10 93 3e 01 	sts	0x013E, r17
				break;
    18f0:	85 cc       	rjmp	.-1782   	; 0x11fc <main+0x10a>
				//////////////////////////////////////////////////////
				case test:

				counter=1;
    18f2:	d0 93 f7 00 	sts	0x00F7, r29
    18f6:	c0 93 f6 00 	sts	0x00F6, r28
				while(fifm<66){
    18fa:	80 91 f4 00 	lds	r24, 0x00F4
    18fe:	90 91 f5 00 	lds	r25, 0x00F5
    1902:	82 34       	cpi	r24, 0x42	; 66
    1904:	91 05       	cpc	r25, r1
    1906:	5c f4       	brge	.+22     	; 0x191e <main+0x82c>
					stopA();stopB();
    1908:	0e 94 bd 00 	call	0x17a	; 0x17a <stopA>
    190c:	0e 94 ba 00 	call	0x174	; 0x174 <stopB>
				break;
				//////////////////////////////////////////////////////
				case test:

				counter=1;
				while(fifm<66){
    1910:	80 91 f4 00 	lds	r24, 0x00F4
    1914:	90 91 f5 00 	lds	r25, 0x00F5
    1918:	82 34       	cpi	r24, 0x42	; 66
    191a:	91 05       	cpc	r25, r1
    191c:	ac f3       	brlt	.-22     	; 0x1908 <main+0x816>
					stopA();stopB();
				}
				counter=0;
    191e:	10 92 f7 00 	sts	0x00F7, r1
    1922:	10 92 f6 00 	sts	0x00F6, r1
				fifm=0;
    1926:	10 92 f5 00 	sts	0x00F5, r1
    192a:	10 92 f4 00 	sts	0x00F4, r1
				
				
				stage=test;
    192e:	10 93 3e 01 	sts	0x013E, r17
				break;
    1932:	64 cc       	rjmp	.-1848   	; 0x11fc <main+0x10a>
				//////////////////////////////////////////////
				case test2:
				btMode();
    1934:	0e 94 81 01 	call	0x302	; 0x302 <btMode>
				stage=test;
    1938:	10 93 3e 01 	sts	0x013E, r17
				break;
    193c:	5f cc       	rjmp	.-1858   	; 0x11fc <main+0x10a>
				//////////////////////////////////////////////////////
				default:stage=loop; break;
    193e:	00 93 3e 01 	sts	0x013E, r16
    1942:	5c cc       	rjmp	.-1864   	; 0x11fc <main+0x10a>
				make90R();
				counter=1;
				while(fifm<66){
					stopA();stopB();
				}
				counter=0;
    1944:	10 92 f7 00 	sts	0x00F7, r1
    1948:	10 92 f6 00 	sts	0x00F6, r1
				fifm=0;
    194c:	10 92 f5 00 	sts	0x00F5, r1
    1950:	10 92 f4 00 	sts	0x00F4, r1
				flagA=1;
    1954:	d0 93 03 01 	sts	0x0103, r29
    1958:	c0 93 02 01 	sts	0x0102, r28
				pulsesAturn=0;
    195c:	10 92 f8 00 	sts	0x00F8, r1
    1960:	10 92 f9 00 	sts	0x00F9, r1
    1964:	10 92 fa 00 	sts	0x00FA, r1
    1968:	10 92 fb 00 	sts	0x00FB, r1
    196c:	1e cd       	rjmp	.-1476   	; 0x13aa <main+0x2b8>

0000196e <__subsf3>:
    196e:	50 58       	subi	r21, 0x80	; 128

00001970 <__addsf3>:
    1970:	bb 27       	eor	r27, r27
    1972:	aa 27       	eor	r26, r26
    1974:	0e d0       	rcall	.+28     	; 0x1992 <__addsf3x>
    1976:	75 c1       	rjmp	.+746    	; 0x1c62 <__fp_round>
    1978:	66 d1       	rcall	.+716    	; 0x1c46 <__fp_pscA>
    197a:	30 f0       	brcs	.+12     	; 0x1988 <__addsf3+0x18>
    197c:	6b d1       	rcall	.+726    	; 0x1c54 <__fp_pscB>
    197e:	20 f0       	brcs	.+8      	; 0x1988 <__addsf3+0x18>
    1980:	31 f4       	brne	.+12     	; 0x198e <__addsf3+0x1e>
    1982:	9f 3f       	cpi	r25, 0xFF	; 255
    1984:	11 f4       	brne	.+4      	; 0x198a <__addsf3+0x1a>
    1986:	1e f4       	brtc	.+6      	; 0x198e <__addsf3+0x1e>
    1988:	5b c1       	rjmp	.+694    	; 0x1c40 <__fp_nan>
    198a:	0e f4       	brtc	.+2      	; 0x198e <__addsf3+0x1e>
    198c:	e0 95       	com	r30
    198e:	e7 fb       	bst	r30, 7
    1990:	51 c1       	rjmp	.+674    	; 0x1c34 <__fp_inf>

00001992 <__addsf3x>:
    1992:	e9 2f       	mov	r30, r25
    1994:	77 d1       	rcall	.+750    	; 0x1c84 <__fp_split3>
    1996:	80 f3       	brcs	.-32     	; 0x1978 <__addsf3+0x8>
    1998:	ba 17       	cp	r27, r26
    199a:	62 07       	cpc	r22, r18
    199c:	73 07       	cpc	r23, r19
    199e:	84 07       	cpc	r24, r20
    19a0:	95 07       	cpc	r25, r21
    19a2:	18 f0       	brcs	.+6      	; 0x19aa <__addsf3x+0x18>
    19a4:	71 f4       	brne	.+28     	; 0x19c2 <__addsf3x+0x30>
    19a6:	9e f5       	brtc	.+102    	; 0x1a0e <__addsf3x+0x7c>
    19a8:	8f c1       	rjmp	.+798    	; 0x1cc8 <__fp_zero>
    19aa:	0e f4       	brtc	.+2      	; 0x19ae <__addsf3x+0x1c>
    19ac:	e0 95       	com	r30
    19ae:	0b 2e       	mov	r0, r27
    19b0:	ba 2f       	mov	r27, r26
    19b2:	a0 2d       	mov	r26, r0
    19b4:	0b 01       	movw	r0, r22
    19b6:	b9 01       	movw	r22, r18
    19b8:	90 01       	movw	r18, r0
    19ba:	0c 01       	movw	r0, r24
    19bc:	ca 01       	movw	r24, r20
    19be:	a0 01       	movw	r20, r0
    19c0:	11 24       	eor	r1, r1
    19c2:	ff 27       	eor	r31, r31
    19c4:	59 1b       	sub	r21, r25
    19c6:	99 f0       	breq	.+38     	; 0x19ee <__addsf3x+0x5c>
    19c8:	59 3f       	cpi	r21, 0xF9	; 249
    19ca:	50 f4       	brcc	.+20     	; 0x19e0 <__addsf3x+0x4e>
    19cc:	50 3e       	cpi	r21, 0xE0	; 224
    19ce:	68 f1       	brcs	.+90     	; 0x1a2a <__addsf3x+0x98>
    19d0:	1a 16       	cp	r1, r26
    19d2:	f0 40       	sbci	r31, 0x00	; 0
    19d4:	a2 2f       	mov	r26, r18
    19d6:	23 2f       	mov	r18, r19
    19d8:	34 2f       	mov	r19, r20
    19da:	44 27       	eor	r20, r20
    19dc:	58 5f       	subi	r21, 0xF8	; 248
    19de:	f3 cf       	rjmp	.-26     	; 0x19c6 <__addsf3x+0x34>
    19e0:	46 95       	lsr	r20
    19e2:	37 95       	ror	r19
    19e4:	27 95       	ror	r18
    19e6:	a7 95       	ror	r26
    19e8:	f0 40       	sbci	r31, 0x00	; 0
    19ea:	53 95       	inc	r21
    19ec:	c9 f7       	brne	.-14     	; 0x19e0 <__addsf3x+0x4e>
    19ee:	7e f4       	brtc	.+30     	; 0x1a0e <__addsf3x+0x7c>
    19f0:	1f 16       	cp	r1, r31
    19f2:	ba 0b       	sbc	r27, r26
    19f4:	62 0b       	sbc	r22, r18
    19f6:	73 0b       	sbc	r23, r19
    19f8:	84 0b       	sbc	r24, r20
    19fa:	ba f0       	brmi	.+46     	; 0x1a2a <__addsf3x+0x98>
    19fc:	91 50       	subi	r25, 0x01	; 1
    19fe:	a1 f0       	breq	.+40     	; 0x1a28 <__addsf3x+0x96>
    1a00:	ff 0f       	add	r31, r31
    1a02:	bb 1f       	adc	r27, r27
    1a04:	66 1f       	adc	r22, r22
    1a06:	77 1f       	adc	r23, r23
    1a08:	88 1f       	adc	r24, r24
    1a0a:	c2 f7       	brpl	.-16     	; 0x19fc <__addsf3x+0x6a>
    1a0c:	0e c0       	rjmp	.+28     	; 0x1a2a <__addsf3x+0x98>
    1a0e:	ba 0f       	add	r27, r26
    1a10:	62 1f       	adc	r22, r18
    1a12:	73 1f       	adc	r23, r19
    1a14:	84 1f       	adc	r24, r20
    1a16:	48 f4       	brcc	.+18     	; 0x1a2a <__addsf3x+0x98>
    1a18:	87 95       	ror	r24
    1a1a:	77 95       	ror	r23
    1a1c:	67 95       	ror	r22
    1a1e:	b7 95       	ror	r27
    1a20:	f7 95       	ror	r31
    1a22:	9e 3f       	cpi	r25, 0xFE	; 254
    1a24:	08 f0       	brcs	.+2      	; 0x1a28 <__addsf3x+0x96>
    1a26:	b3 cf       	rjmp	.-154    	; 0x198e <__addsf3+0x1e>
    1a28:	93 95       	inc	r25
    1a2a:	88 0f       	add	r24, r24
    1a2c:	08 f0       	brcs	.+2      	; 0x1a30 <__addsf3x+0x9e>
    1a2e:	99 27       	eor	r25, r25
    1a30:	ee 0f       	add	r30, r30
    1a32:	97 95       	ror	r25
    1a34:	87 95       	ror	r24
    1a36:	08 95       	ret

00001a38 <__cmpsf2>:
    1a38:	d9 d0       	rcall	.+434    	; 0x1bec <__fp_cmp>
    1a3a:	08 f4       	brcc	.+2      	; 0x1a3e <__cmpsf2+0x6>
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	08 95       	ret

00001a40 <__divsf3>:
    1a40:	0c d0       	rcall	.+24     	; 0x1a5a <__divsf3x>
    1a42:	0f c1       	rjmp	.+542    	; 0x1c62 <__fp_round>
    1a44:	07 d1       	rcall	.+526    	; 0x1c54 <__fp_pscB>
    1a46:	40 f0       	brcs	.+16     	; 0x1a58 <__divsf3+0x18>
    1a48:	fe d0       	rcall	.+508    	; 0x1c46 <__fp_pscA>
    1a4a:	30 f0       	brcs	.+12     	; 0x1a58 <__divsf3+0x18>
    1a4c:	21 f4       	brne	.+8      	; 0x1a56 <__divsf3+0x16>
    1a4e:	5f 3f       	cpi	r21, 0xFF	; 255
    1a50:	19 f0       	breq	.+6      	; 0x1a58 <__divsf3+0x18>
    1a52:	f0 c0       	rjmp	.+480    	; 0x1c34 <__fp_inf>
    1a54:	51 11       	cpse	r21, r1
    1a56:	39 c1       	rjmp	.+626    	; 0x1cca <__fp_szero>
    1a58:	f3 c0       	rjmp	.+486    	; 0x1c40 <__fp_nan>

00001a5a <__divsf3x>:
    1a5a:	14 d1       	rcall	.+552    	; 0x1c84 <__fp_split3>
    1a5c:	98 f3       	brcs	.-26     	; 0x1a44 <__divsf3+0x4>

00001a5e <__divsf3_pse>:
    1a5e:	99 23       	and	r25, r25
    1a60:	c9 f3       	breq	.-14     	; 0x1a54 <__divsf3+0x14>
    1a62:	55 23       	and	r21, r21
    1a64:	b1 f3       	breq	.-20     	; 0x1a52 <__divsf3+0x12>
    1a66:	95 1b       	sub	r25, r21
    1a68:	55 0b       	sbc	r21, r21
    1a6a:	bb 27       	eor	r27, r27
    1a6c:	aa 27       	eor	r26, r26
    1a6e:	62 17       	cp	r22, r18
    1a70:	73 07       	cpc	r23, r19
    1a72:	84 07       	cpc	r24, r20
    1a74:	38 f0       	brcs	.+14     	; 0x1a84 <__divsf3_pse+0x26>
    1a76:	9f 5f       	subi	r25, 0xFF	; 255
    1a78:	5f 4f       	sbci	r21, 0xFF	; 255
    1a7a:	22 0f       	add	r18, r18
    1a7c:	33 1f       	adc	r19, r19
    1a7e:	44 1f       	adc	r20, r20
    1a80:	aa 1f       	adc	r26, r26
    1a82:	a9 f3       	breq	.-22     	; 0x1a6e <__divsf3_pse+0x10>
    1a84:	33 d0       	rcall	.+102    	; 0x1aec <__divsf3_pse+0x8e>
    1a86:	0e 2e       	mov	r0, r30
    1a88:	3a f0       	brmi	.+14     	; 0x1a98 <__divsf3_pse+0x3a>
    1a8a:	e0 e8       	ldi	r30, 0x80	; 128
    1a8c:	30 d0       	rcall	.+96     	; 0x1aee <__divsf3_pse+0x90>
    1a8e:	91 50       	subi	r25, 0x01	; 1
    1a90:	50 40       	sbci	r21, 0x00	; 0
    1a92:	e6 95       	lsr	r30
    1a94:	00 1c       	adc	r0, r0
    1a96:	ca f7       	brpl	.-14     	; 0x1a8a <__divsf3_pse+0x2c>
    1a98:	29 d0       	rcall	.+82     	; 0x1aec <__divsf3_pse+0x8e>
    1a9a:	fe 2f       	mov	r31, r30
    1a9c:	27 d0       	rcall	.+78     	; 0x1aec <__divsf3_pse+0x8e>
    1a9e:	66 0f       	add	r22, r22
    1aa0:	77 1f       	adc	r23, r23
    1aa2:	88 1f       	adc	r24, r24
    1aa4:	bb 1f       	adc	r27, r27
    1aa6:	26 17       	cp	r18, r22
    1aa8:	37 07       	cpc	r19, r23
    1aaa:	48 07       	cpc	r20, r24
    1aac:	ab 07       	cpc	r26, r27
    1aae:	b0 e8       	ldi	r27, 0x80	; 128
    1ab0:	09 f0       	breq	.+2      	; 0x1ab4 <__divsf3_pse+0x56>
    1ab2:	bb 0b       	sbc	r27, r27
    1ab4:	80 2d       	mov	r24, r0
    1ab6:	bf 01       	movw	r22, r30
    1ab8:	ff 27       	eor	r31, r31
    1aba:	93 58       	subi	r25, 0x83	; 131
    1abc:	5f 4f       	sbci	r21, 0xFF	; 255
    1abe:	2a f0       	brmi	.+10     	; 0x1aca <__divsf3_pse+0x6c>
    1ac0:	9e 3f       	cpi	r25, 0xFE	; 254
    1ac2:	51 05       	cpc	r21, r1
    1ac4:	68 f0       	brcs	.+26     	; 0x1ae0 <__divsf3_pse+0x82>
    1ac6:	b6 c0       	rjmp	.+364    	; 0x1c34 <__fp_inf>
    1ac8:	00 c1       	rjmp	.+512    	; 0x1cca <__fp_szero>
    1aca:	5f 3f       	cpi	r21, 0xFF	; 255
    1acc:	ec f3       	brlt	.-6      	; 0x1ac8 <__divsf3_pse+0x6a>
    1ace:	98 3e       	cpi	r25, 0xE8	; 232
    1ad0:	dc f3       	brlt	.-10     	; 0x1ac8 <__divsf3_pse+0x6a>
    1ad2:	86 95       	lsr	r24
    1ad4:	77 95       	ror	r23
    1ad6:	67 95       	ror	r22
    1ad8:	b7 95       	ror	r27
    1ada:	f7 95       	ror	r31
    1adc:	9f 5f       	subi	r25, 0xFF	; 255
    1ade:	c9 f7       	brne	.-14     	; 0x1ad2 <__divsf3_pse+0x74>
    1ae0:	88 0f       	add	r24, r24
    1ae2:	91 1d       	adc	r25, r1
    1ae4:	96 95       	lsr	r25
    1ae6:	87 95       	ror	r24
    1ae8:	97 f9       	bld	r25, 7
    1aea:	08 95       	ret
    1aec:	e1 e0       	ldi	r30, 0x01	; 1
    1aee:	66 0f       	add	r22, r22
    1af0:	77 1f       	adc	r23, r23
    1af2:	88 1f       	adc	r24, r24
    1af4:	bb 1f       	adc	r27, r27
    1af6:	62 17       	cp	r22, r18
    1af8:	73 07       	cpc	r23, r19
    1afa:	84 07       	cpc	r24, r20
    1afc:	ba 07       	cpc	r27, r26
    1afe:	20 f0       	brcs	.+8      	; 0x1b08 <__divsf3_pse+0xaa>
    1b00:	62 1b       	sub	r22, r18
    1b02:	73 0b       	sbc	r23, r19
    1b04:	84 0b       	sbc	r24, r20
    1b06:	ba 0b       	sbc	r27, r26
    1b08:	ee 1f       	adc	r30, r30
    1b0a:	88 f7       	brcc	.-30     	; 0x1aee <__divsf3_pse+0x90>
    1b0c:	e0 95       	com	r30
    1b0e:	08 95       	ret

00001b10 <__fixsfsi>:
    1b10:	04 d0       	rcall	.+8      	; 0x1b1a <__fixunssfsi>
    1b12:	68 94       	set
    1b14:	b1 11       	cpse	r27, r1
    1b16:	d9 c0       	rjmp	.+434    	; 0x1cca <__fp_szero>
    1b18:	08 95       	ret

00001b1a <__fixunssfsi>:
    1b1a:	bc d0       	rcall	.+376    	; 0x1c94 <__fp_splitA>
    1b1c:	88 f0       	brcs	.+34     	; 0x1b40 <__fixunssfsi+0x26>
    1b1e:	9f 57       	subi	r25, 0x7F	; 127
    1b20:	90 f0       	brcs	.+36     	; 0x1b46 <__fixunssfsi+0x2c>
    1b22:	b9 2f       	mov	r27, r25
    1b24:	99 27       	eor	r25, r25
    1b26:	b7 51       	subi	r27, 0x17	; 23
    1b28:	a0 f0       	brcs	.+40     	; 0x1b52 <__fixunssfsi+0x38>
    1b2a:	d1 f0       	breq	.+52     	; 0x1b60 <__fixunssfsi+0x46>
    1b2c:	66 0f       	add	r22, r22
    1b2e:	77 1f       	adc	r23, r23
    1b30:	88 1f       	adc	r24, r24
    1b32:	99 1f       	adc	r25, r25
    1b34:	1a f0       	brmi	.+6      	; 0x1b3c <__fixunssfsi+0x22>
    1b36:	ba 95       	dec	r27
    1b38:	c9 f7       	brne	.-14     	; 0x1b2c <__fixunssfsi+0x12>
    1b3a:	12 c0       	rjmp	.+36     	; 0x1b60 <__fixunssfsi+0x46>
    1b3c:	b1 30       	cpi	r27, 0x01	; 1
    1b3e:	81 f0       	breq	.+32     	; 0x1b60 <__fixunssfsi+0x46>
    1b40:	c3 d0       	rcall	.+390    	; 0x1cc8 <__fp_zero>
    1b42:	b1 e0       	ldi	r27, 0x01	; 1
    1b44:	08 95       	ret
    1b46:	c0 c0       	rjmp	.+384    	; 0x1cc8 <__fp_zero>
    1b48:	67 2f       	mov	r22, r23
    1b4a:	78 2f       	mov	r23, r24
    1b4c:	88 27       	eor	r24, r24
    1b4e:	b8 5f       	subi	r27, 0xF8	; 248
    1b50:	39 f0       	breq	.+14     	; 0x1b60 <__fixunssfsi+0x46>
    1b52:	b9 3f       	cpi	r27, 0xF9	; 249
    1b54:	cc f3       	brlt	.-14     	; 0x1b48 <__fixunssfsi+0x2e>
    1b56:	86 95       	lsr	r24
    1b58:	77 95       	ror	r23
    1b5a:	67 95       	ror	r22
    1b5c:	b3 95       	inc	r27
    1b5e:	d9 f7       	brne	.-10     	; 0x1b56 <__fixunssfsi+0x3c>
    1b60:	3e f4       	brtc	.+14     	; 0x1b70 <__fixunssfsi+0x56>
    1b62:	90 95       	com	r25
    1b64:	80 95       	com	r24
    1b66:	70 95       	com	r23
    1b68:	61 95       	neg	r22
    1b6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b6c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b70:	08 95       	ret

00001b72 <__floatunsisf>:
    1b72:	e8 94       	clt
    1b74:	09 c0       	rjmp	.+18     	; 0x1b88 <__floatsisf+0x12>

00001b76 <__floatsisf>:
    1b76:	97 fb       	bst	r25, 7
    1b78:	3e f4       	brtc	.+14     	; 0x1b88 <__floatsisf+0x12>
    1b7a:	90 95       	com	r25
    1b7c:	80 95       	com	r24
    1b7e:	70 95       	com	r23
    1b80:	61 95       	neg	r22
    1b82:	7f 4f       	sbci	r23, 0xFF	; 255
    1b84:	8f 4f       	sbci	r24, 0xFF	; 255
    1b86:	9f 4f       	sbci	r25, 0xFF	; 255
    1b88:	99 23       	and	r25, r25
    1b8a:	a9 f0       	breq	.+42     	; 0x1bb6 <__floatsisf+0x40>
    1b8c:	f9 2f       	mov	r31, r25
    1b8e:	96 e9       	ldi	r25, 0x96	; 150
    1b90:	bb 27       	eor	r27, r27
    1b92:	93 95       	inc	r25
    1b94:	f6 95       	lsr	r31
    1b96:	87 95       	ror	r24
    1b98:	77 95       	ror	r23
    1b9a:	67 95       	ror	r22
    1b9c:	b7 95       	ror	r27
    1b9e:	f1 11       	cpse	r31, r1
    1ba0:	f8 cf       	rjmp	.-16     	; 0x1b92 <__floatsisf+0x1c>
    1ba2:	fa f4       	brpl	.+62     	; 0x1be2 <__floatsisf+0x6c>
    1ba4:	bb 0f       	add	r27, r27
    1ba6:	11 f4       	brne	.+4      	; 0x1bac <__floatsisf+0x36>
    1ba8:	60 ff       	sbrs	r22, 0
    1baa:	1b c0       	rjmp	.+54     	; 0x1be2 <__floatsisf+0x6c>
    1bac:	6f 5f       	subi	r22, 0xFF	; 255
    1bae:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb0:	8f 4f       	sbci	r24, 0xFF	; 255
    1bb2:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb4:	16 c0       	rjmp	.+44     	; 0x1be2 <__floatsisf+0x6c>
    1bb6:	88 23       	and	r24, r24
    1bb8:	11 f0       	breq	.+4      	; 0x1bbe <__floatsisf+0x48>
    1bba:	96 e9       	ldi	r25, 0x96	; 150
    1bbc:	11 c0       	rjmp	.+34     	; 0x1be0 <__floatsisf+0x6a>
    1bbe:	77 23       	and	r23, r23
    1bc0:	21 f0       	breq	.+8      	; 0x1bca <__floatsisf+0x54>
    1bc2:	9e e8       	ldi	r25, 0x8E	; 142
    1bc4:	87 2f       	mov	r24, r23
    1bc6:	76 2f       	mov	r23, r22
    1bc8:	05 c0       	rjmp	.+10     	; 0x1bd4 <__floatsisf+0x5e>
    1bca:	66 23       	and	r22, r22
    1bcc:	71 f0       	breq	.+28     	; 0x1bea <__floatsisf+0x74>
    1bce:	96 e8       	ldi	r25, 0x86	; 134
    1bd0:	86 2f       	mov	r24, r22
    1bd2:	70 e0       	ldi	r23, 0x00	; 0
    1bd4:	60 e0       	ldi	r22, 0x00	; 0
    1bd6:	2a f0       	brmi	.+10     	; 0x1be2 <__floatsisf+0x6c>
    1bd8:	9a 95       	dec	r25
    1bda:	66 0f       	add	r22, r22
    1bdc:	77 1f       	adc	r23, r23
    1bde:	88 1f       	adc	r24, r24
    1be0:	da f7       	brpl	.-10     	; 0x1bd8 <__floatsisf+0x62>
    1be2:	88 0f       	add	r24, r24
    1be4:	96 95       	lsr	r25
    1be6:	87 95       	ror	r24
    1be8:	97 f9       	bld	r25, 7
    1bea:	08 95       	ret

00001bec <__fp_cmp>:
    1bec:	99 0f       	add	r25, r25
    1bee:	00 08       	sbc	r0, r0
    1bf0:	55 0f       	add	r21, r21
    1bf2:	aa 0b       	sbc	r26, r26
    1bf4:	e0 e8       	ldi	r30, 0x80	; 128
    1bf6:	fe ef       	ldi	r31, 0xFE	; 254
    1bf8:	16 16       	cp	r1, r22
    1bfa:	17 06       	cpc	r1, r23
    1bfc:	e8 07       	cpc	r30, r24
    1bfe:	f9 07       	cpc	r31, r25
    1c00:	c0 f0       	brcs	.+48     	; 0x1c32 <__fp_cmp+0x46>
    1c02:	12 16       	cp	r1, r18
    1c04:	13 06       	cpc	r1, r19
    1c06:	e4 07       	cpc	r30, r20
    1c08:	f5 07       	cpc	r31, r21
    1c0a:	98 f0       	brcs	.+38     	; 0x1c32 <__fp_cmp+0x46>
    1c0c:	62 1b       	sub	r22, r18
    1c0e:	73 0b       	sbc	r23, r19
    1c10:	84 0b       	sbc	r24, r20
    1c12:	95 0b       	sbc	r25, r21
    1c14:	39 f4       	brne	.+14     	; 0x1c24 <__fp_cmp+0x38>
    1c16:	0a 26       	eor	r0, r26
    1c18:	61 f0       	breq	.+24     	; 0x1c32 <__fp_cmp+0x46>
    1c1a:	23 2b       	or	r18, r19
    1c1c:	24 2b       	or	r18, r20
    1c1e:	25 2b       	or	r18, r21
    1c20:	21 f4       	brne	.+8      	; 0x1c2a <__fp_cmp+0x3e>
    1c22:	08 95       	ret
    1c24:	0a 26       	eor	r0, r26
    1c26:	09 f4       	brne	.+2      	; 0x1c2a <__fp_cmp+0x3e>
    1c28:	a1 40       	sbci	r26, 0x01	; 1
    1c2a:	a6 95       	lsr	r26
    1c2c:	8f ef       	ldi	r24, 0xFF	; 255
    1c2e:	81 1d       	adc	r24, r1
    1c30:	81 1d       	adc	r24, r1
    1c32:	08 95       	ret

00001c34 <__fp_inf>:
    1c34:	97 f9       	bld	r25, 7
    1c36:	9f 67       	ori	r25, 0x7F	; 127
    1c38:	80 e8       	ldi	r24, 0x80	; 128
    1c3a:	70 e0       	ldi	r23, 0x00	; 0
    1c3c:	60 e0       	ldi	r22, 0x00	; 0
    1c3e:	08 95       	ret

00001c40 <__fp_nan>:
    1c40:	9f ef       	ldi	r25, 0xFF	; 255
    1c42:	80 ec       	ldi	r24, 0xC0	; 192
    1c44:	08 95       	ret

00001c46 <__fp_pscA>:
    1c46:	00 24       	eor	r0, r0
    1c48:	0a 94       	dec	r0
    1c4a:	16 16       	cp	r1, r22
    1c4c:	17 06       	cpc	r1, r23
    1c4e:	18 06       	cpc	r1, r24
    1c50:	09 06       	cpc	r0, r25
    1c52:	08 95       	ret

00001c54 <__fp_pscB>:
    1c54:	00 24       	eor	r0, r0
    1c56:	0a 94       	dec	r0
    1c58:	12 16       	cp	r1, r18
    1c5a:	13 06       	cpc	r1, r19
    1c5c:	14 06       	cpc	r1, r20
    1c5e:	05 06       	cpc	r0, r21
    1c60:	08 95       	ret

00001c62 <__fp_round>:
    1c62:	09 2e       	mov	r0, r25
    1c64:	03 94       	inc	r0
    1c66:	00 0c       	add	r0, r0
    1c68:	11 f4       	brne	.+4      	; 0x1c6e <__fp_round+0xc>
    1c6a:	88 23       	and	r24, r24
    1c6c:	52 f0       	brmi	.+20     	; 0x1c82 <__fp_round+0x20>
    1c6e:	bb 0f       	add	r27, r27
    1c70:	40 f4       	brcc	.+16     	; 0x1c82 <__fp_round+0x20>
    1c72:	bf 2b       	or	r27, r31
    1c74:	11 f4       	brne	.+4      	; 0x1c7a <__fp_round+0x18>
    1c76:	60 ff       	sbrs	r22, 0
    1c78:	04 c0       	rjmp	.+8      	; 0x1c82 <__fp_round+0x20>
    1c7a:	6f 5f       	subi	r22, 0xFF	; 255
    1c7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c7e:	8f 4f       	sbci	r24, 0xFF	; 255
    1c80:	9f 4f       	sbci	r25, 0xFF	; 255
    1c82:	08 95       	ret

00001c84 <__fp_split3>:
    1c84:	57 fd       	sbrc	r21, 7
    1c86:	90 58       	subi	r25, 0x80	; 128
    1c88:	44 0f       	add	r20, r20
    1c8a:	55 1f       	adc	r21, r21
    1c8c:	59 f0       	breq	.+22     	; 0x1ca4 <__fp_splitA+0x10>
    1c8e:	5f 3f       	cpi	r21, 0xFF	; 255
    1c90:	71 f0       	breq	.+28     	; 0x1cae <__fp_splitA+0x1a>
    1c92:	47 95       	ror	r20

00001c94 <__fp_splitA>:
    1c94:	88 0f       	add	r24, r24
    1c96:	97 fb       	bst	r25, 7
    1c98:	99 1f       	adc	r25, r25
    1c9a:	61 f0       	breq	.+24     	; 0x1cb4 <__fp_splitA+0x20>
    1c9c:	9f 3f       	cpi	r25, 0xFF	; 255
    1c9e:	79 f0       	breq	.+30     	; 0x1cbe <__fp_splitA+0x2a>
    1ca0:	87 95       	ror	r24
    1ca2:	08 95       	ret
    1ca4:	12 16       	cp	r1, r18
    1ca6:	13 06       	cpc	r1, r19
    1ca8:	14 06       	cpc	r1, r20
    1caa:	55 1f       	adc	r21, r21
    1cac:	f2 cf       	rjmp	.-28     	; 0x1c92 <__fp_split3+0xe>
    1cae:	46 95       	lsr	r20
    1cb0:	f1 df       	rcall	.-30     	; 0x1c94 <__fp_splitA>
    1cb2:	08 c0       	rjmp	.+16     	; 0x1cc4 <__fp_splitA+0x30>
    1cb4:	16 16       	cp	r1, r22
    1cb6:	17 06       	cpc	r1, r23
    1cb8:	18 06       	cpc	r1, r24
    1cba:	99 1f       	adc	r25, r25
    1cbc:	f1 cf       	rjmp	.-30     	; 0x1ca0 <__fp_splitA+0xc>
    1cbe:	86 95       	lsr	r24
    1cc0:	71 05       	cpc	r23, r1
    1cc2:	61 05       	cpc	r22, r1
    1cc4:	08 94       	sec
    1cc6:	08 95       	ret

00001cc8 <__fp_zero>:
    1cc8:	e8 94       	clt

00001cca <__fp_szero>:
    1cca:	bb 27       	eor	r27, r27
    1ccc:	66 27       	eor	r22, r22
    1cce:	77 27       	eor	r23, r23
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	97 f9       	bld	r25, 7
    1cd4:	08 95       	ret

00001cd6 <__gesf2>:
    1cd6:	8a df       	rcall	.-236    	; 0x1bec <__fp_cmp>
    1cd8:	08 f4       	brcc	.+2      	; 0x1cdc <__gesf2+0x6>
    1cda:	8f ef       	ldi	r24, 0xFF	; 255
    1cdc:	08 95       	ret

00001cde <__mulsf3>:
    1cde:	0b d0       	rcall	.+22     	; 0x1cf6 <__mulsf3x>
    1ce0:	c0 cf       	rjmp	.-128    	; 0x1c62 <__fp_round>
    1ce2:	b1 df       	rcall	.-158    	; 0x1c46 <__fp_pscA>
    1ce4:	28 f0       	brcs	.+10     	; 0x1cf0 <__mulsf3+0x12>
    1ce6:	b6 df       	rcall	.-148    	; 0x1c54 <__fp_pscB>
    1ce8:	18 f0       	brcs	.+6      	; 0x1cf0 <__mulsf3+0x12>
    1cea:	95 23       	and	r25, r21
    1cec:	09 f0       	breq	.+2      	; 0x1cf0 <__mulsf3+0x12>
    1cee:	a2 cf       	rjmp	.-188    	; 0x1c34 <__fp_inf>
    1cf0:	a7 cf       	rjmp	.-178    	; 0x1c40 <__fp_nan>
    1cf2:	11 24       	eor	r1, r1
    1cf4:	ea cf       	rjmp	.-44     	; 0x1cca <__fp_szero>

00001cf6 <__mulsf3x>:
    1cf6:	c6 df       	rcall	.-116    	; 0x1c84 <__fp_split3>
    1cf8:	a0 f3       	brcs	.-24     	; 0x1ce2 <__mulsf3+0x4>

00001cfa <__mulsf3_pse>:
    1cfa:	95 9f       	mul	r25, r21
    1cfc:	d1 f3       	breq	.-12     	; 0x1cf2 <__mulsf3+0x14>
    1cfe:	95 0f       	add	r25, r21
    1d00:	50 e0       	ldi	r21, 0x00	; 0
    1d02:	55 1f       	adc	r21, r21
    1d04:	62 9f       	mul	r22, r18
    1d06:	f0 01       	movw	r30, r0
    1d08:	72 9f       	mul	r23, r18
    1d0a:	bb 27       	eor	r27, r27
    1d0c:	f0 0d       	add	r31, r0
    1d0e:	b1 1d       	adc	r27, r1
    1d10:	63 9f       	mul	r22, r19
    1d12:	aa 27       	eor	r26, r26
    1d14:	f0 0d       	add	r31, r0
    1d16:	b1 1d       	adc	r27, r1
    1d18:	aa 1f       	adc	r26, r26
    1d1a:	64 9f       	mul	r22, r20
    1d1c:	66 27       	eor	r22, r22
    1d1e:	b0 0d       	add	r27, r0
    1d20:	a1 1d       	adc	r26, r1
    1d22:	66 1f       	adc	r22, r22
    1d24:	82 9f       	mul	r24, r18
    1d26:	22 27       	eor	r18, r18
    1d28:	b0 0d       	add	r27, r0
    1d2a:	a1 1d       	adc	r26, r1
    1d2c:	62 1f       	adc	r22, r18
    1d2e:	73 9f       	mul	r23, r19
    1d30:	b0 0d       	add	r27, r0
    1d32:	a1 1d       	adc	r26, r1
    1d34:	62 1f       	adc	r22, r18
    1d36:	83 9f       	mul	r24, r19
    1d38:	a0 0d       	add	r26, r0
    1d3a:	61 1d       	adc	r22, r1
    1d3c:	22 1f       	adc	r18, r18
    1d3e:	74 9f       	mul	r23, r20
    1d40:	33 27       	eor	r19, r19
    1d42:	a0 0d       	add	r26, r0
    1d44:	61 1d       	adc	r22, r1
    1d46:	23 1f       	adc	r18, r19
    1d48:	84 9f       	mul	r24, r20
    1d4a:	60 0d       	add	r22, r0
    1d4c:	21 1d       	adc	r18, r1
    1d4e:	82 2f       	mov	r24, r18
    1d50:	76 2f       	mov	r23, r22
    1d52:	6a 2f       	mov	r22, r26
    1d54:	11 24       	eor	r1, r1
    1d56:	9f 57       	subi	r25, 0x7F	; 127
    1d58:	50 40       	sbci	r21, 0x00	; 0
    1d5a:	8a f0       	brmi	.+34     	; 0x1d7e <__mulsf3_pse+0x84>
    1d5c:	e1 f0       	breq	.+56     	; 0x1d96 <__mulsf3_pse+0x9c>
    1d5e:	88 23       	and	r24, r24
    1d60:	4a f0       	brmi	.+18     	; 0x1d74 <__mulsf3_pse+0x7a>
    1d62:	ee 0f       	add	r30, r30
    1d64:	ff 1f       	adc	r31, r31
    1d66:	bb 1f       	adc	r27, r27
    1d68:	66 1f       	adc	r22, r22
    1d6a:	77 1f       	adc	r23, r23
    1d6c:	88 1f       	adc	r24, r24
    1d6e:	91 50       	subi	r25, 0x01	; 1
    1d70:	50 40       	sbci	r21, 0x00	; 0
    1d72:	a9 f7       	brne	.-22     	; 0x1d5e <__mulsf3_pse+0x64>
    1d74:	9e 3f       	cpi	r25, 0xFE	; 254
    1d76:	51 05       	cpc	r21, r1
    1d78:	70 f0       	brcs	.+28     	; 0x1d96 <__mulsf3_pse+0x9c>
    1d7a:	5c cf       	rjmp	.-328    	; 0x1c34 <__fp_inf>
    1d7c:	a6 cf       	rjmp	.-180    	; 0x1cca <__fp_szero>
    1d7e:	5f 3f       	cpi	r21, 0xFF	; 255
    1d80:	ec f3       	brlt	.-6      	; 0x1d7c <__mulsf3_pse+0x82>
    1d82:	98 3e       	cpi	r25, 0xE8	; 232
    1d84:	dc f3       	brlt	.-10     	; 0x1d7c <__mulsf3_pse+0x82>
    1d86:	86 95       	lsr	r24
    1d88:	77 95       	ror	r23
    1d8a:	67 95       	ror	r22
    1d8c:	b7 95       	ror	r27
    1d8e:	f7 95       	ror	r31
    1d90:	e7 95       	ror	r30
    1d92:	9f 5f       	subi	r25, 0xFF	; 255
    1d94:	c1 f7       	brne	.-16     	; 0x1d86 <__mulsf3_pse+0x8c>
    1d96:	fe 2b       	or	r31, r30
    1d98:	88 0f       	add	r24, r24
    1d9a:	91 1d       	adc	r25, r1
    1d9c:	96 95       	lsr	r25
    1d9e:	87 95       	ror	r24
    1da0:	97 f9       	bld	r25, 7
    1da2:	08 95       	ret

00001da4 <__tablejump2__>:
    1da4:	ee 0f       	add	r30, r30
    1da6:	ff 1f       	adc	r31, r31

00001da8 <__tablejump__>:
    1da8:	05 90       	lpm	r0, Z+
    1daa:	f4 91       	lpm	r31, Z
    1dac:	e0 2d       	mov	r30, r0
    1dae:	09 94       	ijmp

00001db0 <sprintf>:
    1db0:	ae e0       	ldi	r26, 0x0E	; 14
    1db2:	b0 e0       	ldi	r27, 0x00	; 0
    1db4:	ee ed       	ldi	r30, 0xDE	; 222
    1db6:	fe e0       	ldi	r31, 0x0E	; 14
    1db8:	0c 94 80 11 	jmp	0x2300	; 0x2300 <__prologue_saves__+0x1c>
    1dbc:	0d 89       	ldd	r16, Y+21	; 0x15
    1dbe:	1e 89       	ldd	r17, Y+22	; 0x16
    1dc0:	86 e0       	ldi	r24, 0x06	; 6
    1dc2:	8c 83       	std	Y+4, r24	; 0x04
    1dc4:	1a 83       	std	Y+2, r17	; 0x02
    1dc6:	09 83       	std	Y+1, r16	; 0x01
    1dc8:	8f ef       	ldi	r24, 0xFF	; 255
    1dca:	9f e7       	ldi	r25, 0x7F	; 127
    1dcc:	9e 83       	std	Y+6, r25	; 0x06
    1dce:	8d 83       	std	Y+5, r24	; 0x05
    1dd0:	ae 01       	movw	r20, r28
    1dd2:	47 5e       	subi	r20, 0xE7	; 231
    1dd4:	5f 4f       	sbci	r21, 0xFF	; 255
    1dd6:	6f 89       	ldd	r22, Y+23	; 0x17
    1dd8:	78 8d       	ldd	r23, Y+24	; 0x18
    1dda:	ce 01       	movw	r24, r28
    1ddc:	01 96       	adiw	r24, 0x01	; 1
    1dde:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <vfprintf>
    1de2:	ef 81       	ldd	r30, Y+7	; 0x07
    1de4:	f8 85       	ldd	r31, Y+8	; 0x08
    1de6:	e0 0f       	add	r30, r16
    1de8:	f1 1f       	adc	r31, r17
    1dea:	10 82       	st	Z, r1
    1dec:	2e 96       	adiw	r28, 0x0e	; 14
    1dee:	e4 e0       	ldi	r30, 0x04	; 4
    1df0:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <__epilogue_restores__+0x1c>

00001df4 <vfprintf>:
    1df4:	ac e0       	ldi	r26, 0x0C	; 12
    1df6:	b0 e0       	ldi	r27, 0x00	; 0
    1df8:	e0 e0       	ldi	r30, 0x00	; 0
    1dfa:	ff e0       	ldi	r31, 0x0F	; 15
    1dfc:	0c 94 72 11 	jmp	0x22e4	; 0x22e4 <__prologue_saves__>
    1e00:	7c 01       	movw	r14, r24
    1e02:	6b 01       	movw	r12, r22
    1e04:	8a 01       	movw	r16, r20
    1e06:	fc 01       	movw	r30, r24
    1e08:	17 82       	std	Z+7, r1	; 0x07
    1e0a:	16 82       	std	Z+6, r1	; 0x06
    1e0c:	83 81       	ldd	r24, Z+3	; 0x03
    1e0e:	81 ff       	sbrs	r24, 1
    1e10:	bd c1       	rjmp	.+890    	; 0x218c <vfprintf+0x398>
    1e12:	ce 01       	movw	r24, r28
    1e14:	01 96       	adiw	r24, 0x01	; 1
    1e16:	4c 01       	movw	r8, r24
    1e18:	f7 01       	movw	r30, r14
    1e1a:	93 81       	ldd	r25, Z+3	; 0x03
    1e1c:	f6 01       	movw	r30, r12
    1e1e:	93 fd       	sbrc	r25, 3
    1e20:	85 91       	lpm	r24, Z+
    1e22:	93 ff       	sbrs	r25, 3
    1e24:	81 91       	ld	r24, Z+
    1e26:	6f 01       	movw	r12, r30
    1e28:	88 23       	and	r24, r24
    1e2a:	09 f4       	brne	.+2      	; 0x1e2e <vfprintf+0x3a>
    1e2c:	ab c1       	rjmp	.+854    	; 0x2184 <vfprintf+0x390>
    1e2e:	85 32       	cpi	r24, 0x25	; 37
    1e30:	39 f4       	brne	.+14     	; 0x1e40 <vfprintf+0x4c>
    1e32:	93 fd       	sbrc	r25, 3
    1e34:	85 91       	lpm	r24, Z+
    1e36:	93 ff       	sbrs	r25, 3
    1e38:	81 91       	ld	r24, Z+
    1e3a:	6f 01       	movw	r12, r30
    1e3c:	85 32       	cpi	r24, 0x25	; 37
    1e3e:	29 f4       	brne	.+10     	; 0x1e4a <vfprintf+0x56>
    1e40:	b7 01       	movw	r22, r14
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <fputc>
    1e48:	e7 cf       	rjmp	.-50     	; 0x1e18 <vfprintf+0x24>
    1e4a:	51 2c       	mov	r5, r1
    1e4c:	31 2c       	mov	r3, r1
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	20 32       	cpi	r18, 0x20	; 32
    1e52:	a0 f4       	brcc	.+40     	; 0x1e7c <vfprintf+0x88>
    1e54:	8b 32       	cpi	r24, 0x2B	; 43
    1e56:	69 f0       	breq	.+26     	; 0x1e72 <vfprintf+0x7e>
    1e58:	30 f4       	brcc	.+12     	; 0x1e66 <vfprintf+0x72>
    1e5a:	80 32       	cpi	r24, 0x20	; 32
    1e5c:	59 f0       	breq	.+22     	; 0x1e74 <vfprintf+0x80>
    1e5e:	83 32       	cpi	r24, 0x23	; 35
    1e60:	69 f4       	brne	.+26     	; 0x1e7c <vfprintf+0x88>
    1e62:	20 61       	ori	r18, 0x10	; 16
    1e64:	2c c0       	rjmp	.+88     	; 0x1ebe <vfprintf+0xca>
    1e66:	8d 32       	cpi	r24, 0x2D	; 45
    1e68:	39 f0       	breq	.+14     	; 0x1e78 <vfprintf+0x84>
    1e6a:	80 33       	cpi	r24, 0x30	; 48
    1e6c:	39 f4       	brne	.+14     	; 0x1e7c <vfprintf+0x88>
    1e6e:	21 60       	ori	r18, 0x01	; 1
    1e70:	26 c0       	rjmp	.+76     	; 0x1ebe <vfprintf+0xca>
    1e72:	22 60       	ori	r18, 0x02	; 2
    1e74:	24 60       	ori	r18, 0x04	; 4
    1e76:	23 c0       	rjmp	.+70     	; 0x1ebe <vfprintf+0xca>
    1e78:	28 60       	ori	r18, 0x08	; 8
    1e7a:	21 c0       	rjmp	.+66     	; 0x1ebe <vfprintf+0xca>
    1e7c:	27 fd       	sbrc	r18, 7
    1e7e:	27 c0       	rjmp	.+78     	; 0x1ece <vfprintf+0xda>
    1e80:	30 ed       	ldi	r19, 0xD0	; 208
    1e82:	38 0f       	add	r19, r24
    1e84:	3a 30       	cpi	r19, 0x0A	; 10
    1e86:	78 f4       	brcc	.+30     	; 0x1ea6 <vfprintf+0xb2>
    1e88:	26 ff       	sbrs	r18, 6
    1e8a:	06 c0       	rjmp	.+12     	; 0x1e98 <vfprintf+0xa4>
    1e8c:	fa e0       	ldi	r31, 0x0A	; 10
    1e8e:	5f 9e       	mul	r5, r31
    1e90:	30 0d       	add	r19, r0
    1e92:	11 24       	eor	r1, r1
    1e94:	53 2e       	mov	r5, r19
    1e96:	13 c0       	rjmp	.+38     	; 0x1ebe <vfprintf+0xca>
    1e98:	8a e0       	ldi	r24, 0x0A	; 10
    1e9a:	38 9e       	mul	r3, r24
    1e9c:	30 0d       	add	r19, r0
    1e9e:	11 24       	eor	r1, r1
    1ea0:	33 2e       	mov	r3, r19
    1ea2:	20 62       	ori	r18, 0x20	; 32
    1ea4:	0c c0       	rjmp	.+24     	; 0x1ebe <vfprintf+0xca>
    1ea6:	8e 32       	cpi	r24, 0x2E	; 46
    1ea8:	21 f4       	brne	.+8      	; 0x1eb2 <vfprintf+0xbe>
    1eaa:	26 fd       	sbrc	r18, 6
    1eac:	6b c1       	rjmp	.+726    	; 0x2184 <vfprintf+0x390>
    1eae:	20 64       	ori	r18, 0x40	; 64
    1eb0:	06 c0       	rjmp	.+12     	; 0x1ebe <vfprintf+0xca>
    1eb2:	8c 36       	cpi	r24, 0x6C	; 108
    1eb4:	11 f4       	brne	.+4      	; 0x1eba <vfprintf+0xc6>
    1eb6:	20 68       	ori	r18, 0x80	; 128
    1eb8:	02 c0       	rjmp	.+4      	; 0x1ebe <vfprintf+0xca>
    1eba:	88 36       	cpi	r24, 0x68	; 104
    1ebc:	41 f4       	brne	.+16     	; 0x1ece <vfprintf+0xda>
    1ebe:	f6 01       	movw	r30, r12
    1ec0:	93 fd       	sbrc	r25, 3
    1ec2:	85 91       	lpm	r24, Z+
    1ec4:	93 ff       	sbrs	r25, 3
    1ec6:	81 91       	ld	r24, Z+
    1ec8:	6f 01       	movw	r12, r30
    1eca:	81 11       	cpse	r24, r1
    1ecc:	c1 cf       	rjmp	.-126    	; 0x1e50 <vfprintf+0x5c>
    1ece:	98 2f       	mov	r25, r24
    1ed0:	9f 7d       	andi	r25, 0xDF	; 223
    1ed2:	95 54       	subi	r25, 0x45	; 69
    1ed4:	93 30       	cpi	r25, 0x03	; 3
    1ed6:	28 f4       	brcc	.+10     	; 0x1ee2 <vfprintf+0xee>
    1ed8:	0c 5f       	subi	r16, 0xFC	; 252
    1eda:	1f 4f       	sbci	r17, 0xFF	; 255
    1edc:	ff e3       	ldi	r31, 0x3F	; 63
    1ede:	f9 83       	std	Y+1, r31	; 0x01
    1ee0:	0d c0       	rjmp	.+26     	; 0x1efc <vfprintf+0x108>
    1ee2:	83 36       	cpi	r24, 0x63	; 99
    1ee4:	31 f0       	breq	.+12     	; 0x1ef2 <vfprintf+0xfe>
    1ee6:	83 37       	cpi	r24, 0x73	; 115
    1ee8:	71 f0       	breq	.+28     	; 0x1f06 <vfprintf+0x112>
    1eea:	83 35       	cpi	r24, 0x53	; 83
    1eec:	09 f0       	breq	.+2      	; 0x1ef0 <vfprintf+0xfc>
    1eee:	5b c0       	rjmp	.+182    	; 0x1fa6 <vfprintf+0x1b2>
    1ef0:	22 c0       	rjmp	.+68     	; 0x1f36 <vfprintf+0x142>
    1ef2:	f8 01       	movw	r30, r16
    1ef4:	80 81       	ld	r24, Z
    1ef6:	89 83       	std	Y+1, r24	; 0x01
    1ef8:	0e 5f       	subi	r16, 0xFE	; 254
    1efa:	1f 4f       	sbci	r17, 0xFF	; 255
    1efc:	44 24       	eor	r4, r4
    1efe:	43 94       	inc	r4
    1f00:	51 2c       	mov	r5, r1
    1f02:	54 01       	movw	r10, r8
    1f04:	15 c0       	rjmp	.+42     	; 0x1f30 <vfprintf+0x13c>
    1f06:	38 01       	movw	r6, r16
    1f08:	f2 e0       	ldi	r31, 0x02	; 2
    1f0a:	6f 0e       	add	r6, r31
    1f0c:	71 1c       	adc	r7, r1
    1f0e:	f8 01       	movw	r30, r16
    1f10:	a0 80       	ld	r10, Z
    1f12:	b1 80       	ldd	r11, Z+1	; 0x01
    1f14:	26 ff       	sbrs	r18, 6
    1f16:	03 c0       	rjmp	.+6      	; 0x1f1e <vfprintf+0x12a>
    1f18:	65 2d       	mov	r22, r5
    1f1a:	70 e0       	ldi	r23, 0x00	; 0
    1f1c:	02 c0       	rjmp	.+4      	; 0x1f22 <vfprintf+0x12e>
    1f1e:	6f ef       	ldi	r22, 0xFF	; 255
    1f20:	7f ef       	ldi	r23, 0xFF	; 255
    1f22:	c5 01       	movw	r24, r10
    1f24:	2c 87       	std	Y+12, r18	; 0x0c
    1f26:	0e 94 d7 10 	call	0x21ae	; 0x21ae <strnlen>
    1f2a:	2c 01       	movw	r4, r24
    1f2c:	83 01       	movw	r16, r6
    1f2e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f30:	2f 77       	andi	r18, 0x7F	; 127
    1f32:	22 2e       	mov	r2, r18
    1f34:	17 c0       	rjmp	.+46     	; 0x1f64 <vfprintf+0x170>
    1f36:	38 01       	movw	r6, r16
    1f38:	f2 e0       	ldi	r31, 0x02	; 2
    1f3a:	6f 0e       	add	r6, r31
    1f3c:	71 1c       	adc	r7, r1
    1f3e:	f8 01       	movw	r30, r16
    1f40:	a0 80       	ld	r10, Z
    1f42:	b1 80       	ldd	r11, Z+1	; 0x01
    1f44:	26 ff       	sbrs	r18, 6
    1f46:	03 c0       	rjmp	.+6      	; 0x1f4e <vfprintf+0x15a>
    1f48:	65 2d       	mov	r22, r5
    1f4a:	70 e0       	ldi	r23, 0x00	; 0
    1f4c:	02 c0       	rjmp	.+4      	; 0x1f52 <vfprintf+0x15e>
    1f4e:	6f ef       	ldi	r22, 0xFF	; 255
    1f50:	7f ef       	ldi	r23, 0xFF	; 255
    1f52:	c5 01       	movw	r24, r10
    1f54:	2c 87       	std	Y+12, r18	; 0x0c
    1f56:	0e 94 cc 10 	call	0x2198	; 0x2198 <strnlen_P>
    1f5a:	2c 01       	movw	r4, r24
    1f5c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f5e:	20 68       	ori	r18, 0x80	; 128
    1f60:	22 2e       	mov	r2, r18
    1f62:	83 01       	movw	r16, r6
    1f64:	23 fc       	sbrc	r2, 3
    1f66:	1b c0       	rjmp	.+54     	; 0x1f9e <vfprintf+0x1aa>
    1f68:	83 2d       	mov	r24, r3
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	48 16       	cp	r4, r24
    1f6e:	59 06       	cpc	r5, r25
    1f70:	b0 f4       	brcc	.+44     	; 0x1f9e <vfprintf+0x1aa>
    1f72:	b7 01       	movw	r22, r14
    1f74:	80 e2       	ldi	r24, 0x20	; 32
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <fputc>
    1f7c:	3a 94       	dec	r3
    1f7e:	f4 cf       	rjmp	.-24     	; 0x1f68 <vfprintf+0x174>
    1f80:	f5 01       	movw	r30, r10
    1f82:	27 fc       	sbrc	r2, 7
    1f84:	85 91       	lpm	r24, Z+
    1f86:	27 fe       	sbrs	r2, 7
    1f88:	81 91       	ld	r24, Z+
    1f8a:	5f 01       	movw	r10, r30
    1f8c:	b7 01       	movw	r22, r14
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <fputc>
    1f94:	31 10       	cpse	r3, r1
    1f96:	3a 94       	dec	r3
    1f98:	f1 e0       	ldi	r31, 0x01	; 1
    1f9a:	4f 1a       	sub	r4, r31
    1f9c:	51 08       	sbc	r5, r1
    1f9e:	41 14       	cp	r4, r1
    1fa0:	51 04       	cpc	r5, r1
    1fa2:	71 f7       	brne	.-36     	; 0x1f80 <vfprintf+0x18c>
    1fa4:	e5 c0       	rjmp	.+458    	; 0x2170 <vfprintf+0x37c>
    1fa6:	84 36       	cpi	r24, 0x64	; 100
    1fa8:	11 f0       	breq	.+4      	; 0x1fae <vfprintf+0x1ba>
    1faa:	89 36       	cpi	r24, 0x69	; 105
    1fac:	39 f5       	brne	.+78     	; 0x1ffc <vfprintf+0x208>
    1fae:	f8 01       	movw	r30, r16
    1fb0:	27 ff       	sbrs	r18, 7
    1fb2:	07 c0       	rjmp	.+14     	; 0x1fc2 <vfprintf+0x1ce>
    1fb4:	60 81       	ld	r22, Z
    1fb6:	71 81       	ldd	r23, Z+1	; 0x01
    1fb8:	82 81       	ldd	r24, Z+2	; 0x02
    1fba:	93 81       	ldd	r25, Z+3	; 0x03
    1fbc:	0c 5f       	subi	r16, 0xFC	; 252
    1fbe:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc0:	08 c0       	rjmp	.+16     	; 0x1fd2 <vfprintf+0x1de>
    1fc2:	60 81       	ld	r22, Z
    1fc4:	71 81       	ldd	r23, Z+1	; 0x01
    1fc6:	88 27       	eor	r24, r24
    1fc8:	77 fd       	sbrc	r23, 7
    1fca:	80 95       	com	r24
    1fcc:	98 2f       	mov	r25, r24
    1fce:	0e 5f       	subi	r16, 0xFE	; 254
    1fd0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd2:	2f 76       	andi	r18, 0x6F	; 111
    1fd4:	b2 2e       	mov	r11, r18
    1fd6:	97 ff       	sbrs	r25, 7
    1fd8:	09 c0       	rjmp	.+18     	; 0x1fec <vfprintf+0x1f8>
    1fda:	90 95       	com	r25
    1fdc:	80 95       	com	r24
    1fde:	70 95       	com	r23
    1fe0:	61 95       	neg	r22
    1fe2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fe4:	8f 4f       	sbci	r24, 0xFF	; 255
    1fe6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe8:	20 68       	ori	r18, 0x80	; 128
    1fea:	b2 2e       	mov	r11, r18
    1fec:	2a e0       	ldi	r18, 0x0A	; 10
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	a4 01       	movw	r20, r8
    1ff2:	0e 94 14 11 	call	0x2228	; 0x2228 <__ultoa_invert>
    1ff6:	a8 2e       	mov	r10, r24
    1ff8:	a8 18       	sub	r10, r8
    1ffa:	44 c0       	rjmp	.+136    	; 0x2084 <vfprintf+0x290>
    1ffc:	85 37       	cpi	r24, 0x75	; 117
    1ffe:	29 f4       	brne	.+10     	; 0x200a <vfprintf+0x216>
    2000:	2f 7e       	andi	r18, 0xEF	; 239
    2002:	b2 2e       	mov	r11, r18
    2004:	2a e0       	ldi	r18, 0x0A	; 10
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	25 c0       	rjmp	.+74     	; 0x2054 <vfprintf+0x260>
    200a:	f2 2f       	mov	r31, r18
    200c:	f9 7f       	andi	r31, 0xF9	; 249
    200e:	bf 2e       	mov	r11, r31
    2010:	8f 36       	cpi	r24, 0x6F	; 111
    2012:	c1 f0       	breq	.+48     	; 0x2044 <vfprintf+0x250>
    2014:	18 f4       	brcc	.+6      	; 0x201c <vfprintf+0x228>
    2016:	88 35       	cpi	r24, 0x58	; 88
    2018:	79 f0       	breq	.+30     	; 0x2038 <vfprintf+0x244>
    201a:	b4 c0       	rjmp	.+360    	; 0x2184 <vfprintf+0x390>
    201c:	80 37       	cpi	r24, 0x70	; 112
    201e:	19 f0       	breq	.+6      	; 0x2026 <vfprintf+0x232>
    2020:	88 37       	cpi	r24, 0x78	; 120
    2022:	21 f0       	breq	.+8      	; 0x202c <vfprintf+0x238>
    2024:	af c0       	rjmp	.+350    	; 0x2184 <vfprintf+0x390>
    2026:	2f 2f       	mov	r18, r31
    2028:	20 61       	ori	r18, 0x10	; 16
    202a:	b2 2e       	mov	r11, r18
    202c:	b4 fe       	sbrs	r11, 4
    202e:	0d c0       	rjmp	.+26     	; 0x204a <vfprintf+0x256>
    2030:	8b 2d       	mov	r24, r11
    2032:	84 60       	ori	r24, 0x04	; 4
    2034:	b8 2e       	mov	r11, r24
    2036:	09 c0       	rjmp	.+18     	; 0x204a <vfprintf+0x256>
    2038:	24 ff       	sbrs	r18, 4
    203a:	0a c0       	rjmp	.+20     	; 0x2050 <vfprintf+0x25c>
    203c:	9f 2f       	mov	r25, r31
    203e:	96 60       	ori	r25, 0x06	; 6
    2040:	b9 2e       	mov	r11, r25
    2042:	06 c0       	rjmp	.+12     	; 0x2050 <vfprintf+0x25c>
    2044:	28 e0       	ldi	r18, 0x08	; 8
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	05 c0       	rjmp	.+10     	; 0x2054 <vfprintf+0x260>
    204a:	20 e1       	ldi	r18, 0x10	; 16
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	02 c0       	rjmp	.+4      	; 0x2054 <vfprintf+0x260>
    2050:	20 e1       	ldi	r18, 0x10	; 16
    2052:	32 e0       	ldi	r19, 0x02	; 2
    2054:	f8 01       	movw	r30, r16
    2056:	b7 fe       	sbrs	r11, 7
    2058:	07 c0       	rjmp	.+14     	; 0x2068 <vfprintf+0x274>
    205a:	60 81       	ld	r22, Z
    205c:	71 81       	ldd	r23, Z+1	; 0x01
    205e:	82 81       	ldd	r24, Z+2	; 0x02
    2060:	93 81       	ldd	r25, Z+3	; 0x03
    2062:	0c 5f       	subi	r16, 0xFC	; 252
    2064:	1f 4f       	sbci	r17, 0xFF	; 255
    2066:	06 c0       	rjmp	.+12     	; 0x2074 <vfprintf+0x280>
    2068:	60 81       	ld	r22, Z
    206a:	71 81       	ldd	r23, Z+1	; 0x01
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	0e 5f       	subi	r16, 0xFE	; 254
    2072:	1f 4f       	sbci	r17, 0xFF	; 255
    2074:	a4 01       	movw	r20, r8
    2076:	0e 94 14 11 	call	0x2228	; 0x2228 <__ultoa_invert>
    207a:	a8 2e       	mov	r10, r24
    207c:	a8 18       	sub	r10, r8
    207e:	fb 2d       	mov	r31, r11
    2080:	ff 77       	andi	r31, 0x7F	; 127
    2082:	bf 2e       	mov	r11, r31
    2084:	b6 fe       	sbrs	r11, 6
    2086:	0b c0       	rjmp	.+22     	; 0x209e <vfprintf+0x2aa>
    2088:	2b 2d       	mov	r18, r11
    208a:	2e 7f       	andi	r18, 0xFE	; 254
    208c:	a5 14       	cp	r10, r5
    208e:	50 f4       	brcc	.+20     	; 0x20a4 <vfprintf+0x2b0>
    2090:	b4 fe       	sbrs	r11, 4
    2092:	0a c0       	rjmp	.+20     	; 0x20a8 <vfprintf+0x2b4>
    2094:	b2 fc       	sbrc	r11, 2
    2096:	08 c0       	rjmp	.+16     	; 0x20a8 <vfprintf+0x2b4>
    2098:	2b 2d       	mov	r18, r11
    209a:	2e 7e       	andi	r18, 0xEE	; 238
    209c:	05 c0       	rjmp	.+10     	; 0x20a8 <vfprintf+0x2b4>
    209e:	7a 2c       	mov	r7, r10
    20a0:	2b 2d       	mov	r18, r11
    20a2:	03 c0       	rjmp	.+6      	; 0x20aa <vfprintf+0x2b6>
    20a4:	7a 2c       	mov	r7, r10
    20a6:	01 c0       	rjmp	.+2      	; 0x20aa <vfprintf+0x2b6>
    20a8:	75 2c       	mov	r7, r5
    20aa:	24 ff       	sbrs	r18, 4
    20ac:	0d c0       	rjmp	.+26     	; 0x20c8 <vfprintf+0x2d4>
    20ae:	fe 01       	movw	r30, r28
    20b0:	ea 0d       	add	r30, r10
    20b2:	f1 1d       	adc	r31, r1
    20b4:	80 81       	ld	r24, Z
    20b6:	80 33       	cpi	r24, 0x30	; 48
    20b8:	11 f4       	brne	.+4      	; 0x20be <vfprintf+0x2ca>
    20ba:	29 7e       	andi	r18, 0xE9	; 233
    20bc:	09 c0       	rjmp	.+18     	; 0x20d0 <vfprintf+0x2dc>
    20be:	22 ff       	sbrs	r18, 2
    20c0:	06 c0       	rjmp	.+12     	; 0x20ce <vfprintf+0x2da>
    20c2:	73 94       	inc	r7
    20c4:	73 94       	inc	r7
    20c6:	04 c0       	rjmp	.+8      	; 0x20d0 <vfprintf+0x2dc>
    20c8:	82 2f       	mov	r24, r18
    20ca:	86 78       	andi	r24, 0x86	; 134
    20cc:	09 f0       	breq	.+2      	; 0x20d0 <vfprintf+0x2dc>
    20ce:	73 94       	inc	r7
    20d0:	23 fd       	sbrc	r18, 3
    20d2:	13 c0       	rjmp	.+38     	; 0x20fa <vfprintf+0x306>
    20d4:	20 ff       	sbrs	r18, 0
    20d6:	06 c0       	rjmp	.+12     	; 0x20e4 <vfprintf+0x2f0>
    20d8:	5a 2c       	mov	r5, r10
    20da:	73 14       	cp	r7, r3
    20dc:	18 f4       	brcc	.+6      	; 0x20e4 <vfprintf+0x2f0>
    20de:	53 0c       	add	r5, r3
    20e0:	57 18       	sub	r5, r7
    20e2:	73 2c       	mov	r7, r3
    20e4:	73 14       	cp	r7, r3
    20e6:	68 f4       	brcc	.+26     	; 0x2102 <vfprintf+0x30e>
    20e8:	b7 01       	movw	r22, r14
    20ea:	80 e2       	ldi	r24, 0x20	; 32
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	2c 87       	std	Y+12, r18	; 0x0c
    20f0:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <fputc>
    20f4:	73 94       	inc	r7
    20f6:	2c 85       	ldd	r18, Y+12	; 0x0c
    20f8:	f5 cf       	rjmp	.-22     	; 0x20e4 <vfprintf+0x2f0>
    20fa:	73 14       	cp	r7, r3
    20fc:	10 f4       	brcc	.+4      	; 0x2102 <vfprintf+0x30e>
    20fe:	37 18       	sub	r3, r7
    2100:	01 c0       	rjmp	.+2      	; 0x2104 <vfprintf+0x310>
    2102:	31 2c       	mov	r3, r1
    2104:	24 ff       	sbrs	r18, 4
    2106:	12 c0       	rjmp	.+36     	; 0x212c <vfprintf+0x338>
    2108:	b7 01       	movw	r22, r14
    210a:	80 e3       	ldi	r24, 0x30	; 48
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	2c 87       	std	Y+12, r18	; 0x0c
    2110:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <fputc>
    2114:	2c 85       	ldd	r18, Y+12	; 0x0c
    2116:	22 ff       	sbrs	r18, 2
    2118:	17 c0       	rjmp	.+46     	; 0x2148 <vfprintf+0x354>
    211a:	21 ff       	sbrs	r18, 1
    211c:	03 c0       	rjmp	.+6      	; 0x2124 <vfprintf+0x330>
    211e:	88 e5       	ldi	r24, 0x58	; 88
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	02 c0       	rjmp	.+4      	; 0x2128 <vfprintf+0x334>
    2124:	88 e7       	ldi	r24, 0x78	; 120
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	b7 01       	movw	r22, r14
    212a:	0c c0       	rjmp	.+24     	; 0x2144 <vfprintf+0x350>
    212c:	82 2f       	mov	r24, r18
    212e:	86 78       	andi	r24, 0x86	; 134
    2130:	59 f0       	breq	.+22     	; 0x2148 <vfprintf+0x354>
    2132:	21 fd       	sbrc	r18, 1
    2134:	02 c0       	rjmp	.+4      	; 0x213a <vfprintf+0x346>
    2136:	80 e2       	ldi	r24, 0x20	; 32
    2138:	01 c0       	rjmp	.+2      	; 0x213c <vfprintf+0x348>
    213a:	8b e2       	ldi	r24, 0x2B	; 43
    213c:	27 fd       	sbrc	r18, 7
    213e:	8d e2       	ldi	r24, 0x2D	; 45
    2140:	b7 01       	movw	r22, r14
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <fputc>
    2148:	a5 14       	cp	r10, r5
    214a:	38 f4       	brcc	.+14     	; 0x215a <vfprintf+0x366>
    214c:	b7 01       	movw	r22, r14
    214e:	80 e3       	ldi	r24, 0x30	; 48
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <fputc>
    2156:	5a 94       	dec	r5
    2158:	f7 cf       	rjmp	.-18     	; 0x2148 <vfprintf+0x354>
    215a:	aa 94       	dec	r10
    215c:	f4 01       	movw	r30, r8
    215e:	ea 0d       	add	r30, r10
    2160:	f1 1d       	adc	r31, r1
    2162:	80 81       	ld	r24, Z
    2164:	b7 01       	movw	r22, r14
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <fputc>
    216c:	a1 10       	cpse	r10, r1
    216e:	f5 cf       	rjmp	.-22     	; 0x215a <vfprintf+0x366>
    2170:	33 20       	and	r3, r3
    2172:	09 f4       	brne	.+2      	; 0x2176 <vfprintf+0x382>
    2174:	51 ce       	rjmp	.-862    	; 0x1e18 <vfprintf+0x24>
    2176:	b7 01       	movw	r22, r14
    2178:	80 e2       	ldi	r24, 0x20	; 32
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <fputc>
    2180:	3a 94       	dec	r3
    2182:	f6 cf       	rjmp	.-20     	; 0x2170 <vfprintf+0x37c>
    2184:	f7 01       	movw	r30, r14
    2186:	86 81       	ldd	r24, Z+6	; 0x06
    2188:	97 81       	ldd	r25, Z+7	; 0x07
    218a:	02 c0       	rjmp	.+4      	; 0x2190 <vfprintf+0x39c>
    218c:	8f ef       	ldi	r24, 0xFF	; 255
    218e:	9f ef       	ldi	r25, 0xFF	; 255
    2190:	2c 96       	adiw	r28, 0x0c	; 12
    2192:	e2 e1       	ldi	r30, 0x12	; 18
    2194:	0c 94 8e 11 	jmp	0x231c	; 0x231c <__epilogue_restores__>

00002198 <strnlen_P>:
    2198:	fc 01       	movw	r30, r24
    219a:	05 90       	lpm	r0, Z+
    219c:	61 50       	subi	r22, 0x01	; 1
    219e:	70 40       	sbci	r23, 0x00	; 0
    21a0:	01 10       	cpse	r0, r1
    21a2:	d8 f7       	brcc	.-10     	; 0x219a <strnlen_P+0x2>
    21a4:	80 95       	com	r24
    21a6:	90 95       	com	r25
    21a8:	8e 0f       	add	r24, r30
    21aa:	9f 1f       	adc	r25, r31
    21ac:	08 95       	ret

000021ae <strnlen>:
    21ae:	fc 01       	movw	r30, r24
    21b0:	61 50       	subi	r22, 0x01	; 1
    21b2:	70 40       	sbci	r23, 0x00	; 0
    21b4:	01 90       	ld	r0, Z+
    21b6:	01 10       	cpse	r0, r1
    21b8:	d8 f7       	brcc	.-10     	; 0x21b0 <strnlen+0x2>
    21ba:	80 95       	com	r24
    21bc:	90 95       	com	r25
    21be:	8e 0f       	add	r24, r30
    21c0:	9f 1f       	adc	r25, r31
    21c2:	08 95       	ret

000021c4 <fputc>:
    21c4:	0f 93       	push	r16
    21c6:	1f 93       	push	r17
    21c8:	cf 93       	push	r28
    21ca:	df 93       	push	r29
    21cc:	18 2f       	mov	r17, r24
    21ce:	09 2f       	mov	r16, r25
    21d0:	eb 01       	movw	r28, r22
    21d2:	8b 81       	ldd	r24, Y+3	; 0x03
    21d4:	81 fd       	sbrc	r24, 1
    21d6:	03 c0       	rjmp	.+6      	; 0x21de <fputc+0x1a>
    21d8:	8f ef       	ldi	r24, 0xFF	; 255
    21da:	9f ef       	ldi	r25, 0xFF	; 255
    21dc:	20 c0       	rjmp	.+64     	; 0x221e <fputc+0x5a>
    21de:	82 ff       	sbrs	r24, 2
    21e0:	10 c0       	rjmp	.+32     	; 0x2202 <fputc+0x3e>
    21e2:	4e 81       	ldd	r20, Y+6	; 0x06
    21e4:	5f 81       	ldd	r21, Y+7	; 0x07
    21e6:	2c 81       	ldd	r18, Y+4	; 0x04
    21e8:	3d 81       	ldd	r19, Y+5	; 0x05
    21ea:	42 17       	cp	r20, r18
    21ec:	53 07       	cpc	r21, r19
    21ee:	7c f4       	brge	.+30     	; 0x220e <fputc+0x4a>
    21f0:	e8 81       	ld	r30, Y
    21f2:	f9 81       	ldd	r31, Y+1	; 0x01
    21f4:	9f 01       	movw	r18, r30
    21f6:	2f 5f       	subi	r18, 0xFF	; 255
    21f8:	3f 4f       	sbci	r19, 0xFF	; 255
    21fa:	39 83       	std	Y+1, r19	; 0x01
    21fc:	28 83       	st	Y, r18
    21fe:	10 83       	st	Z, r17
    2200:	06 c0       	rjmp	.+12     	; 0x220e <fputc+0x4a>
    2202:	e8 85       	ldd	r30, Y+8	; 0x08
    2204:	f9 85       	ldd	r31, Y+9	; 0x09
    2206:	81 2f       	mov	r24, r17
    2208:	09 95       	icall
    220a:	89 2b       	or	r24, r25
    220c:	29 f7       	brne	.-54     	; 0x21d8 <fputc+0x14>
    220e:	2e 81       	ldd	r18, Y+6	; 0x06
    2210:	3f 81       	ldd	r19, Y+7	; 0x07
    2212:	2f 5f       	subi	r18, 0xFF	; 255
    2214:	3f 4f       	sbci	r19, 0xFF	; 255
    2216:	3f 83       	std	Y+7, r19	; 0x07
    2218:	2e 83       	std	Y+6, r18	; 0x06
    221a:	81 2f       	mov	r24, r17
    221c:	90 2f       	mov	r25, r16
    221e:	df 91       	pop	r29
    2220:	cf 91       	pop	r28
    2222:	1f 91       	pop	r17
    2224:	0f 91       	pop	r16
    2226:	08 95       	ret

00002228 <__ultoa_invert>:
    2228:	fa 01       	movw	r30, r20
    222a:	aa 27       	eor	r26, r26
    222c:	28 30       	cpi	r18, 0x08	; 8
    222e:	51 f1       	breq	.+84     	; 0x2284 <__ultoa_invert+0x5c>
    2230:	20 31       	cpi	r18, 0x10	; 16
    2232:	81 f1       	breq	.+96     	; 0x2294 <__ultoa_invert+0x6c>
    2234:	e8 94       	clt
    2236:	6f 93       	push	r22
    2238:	6e 7f       	andi	r22, 0xFE	; 254
    223a:	6e 5f       	subi	r22, 0xFE	; 254
    223c:	7f 4f       	sbci	r23, 0xFF	; 255
    223e:	8f 4f       	sbci	r24, 0xFF	; 255
    2240:	9f 4f       	sbci	r25, 0xFF	; 255
    2242:	af 4f       	sbci	r26, 0xFF	; 255
    2244:	b1 e0       	ldi	r27, 0x01	; 1
    2246:	3e d0       	rcall	.+124    	; 0x22c4 <__ultoa_invert+0x9c>
    2248:	b4 e0       	ldi	r27, 0x04	; 4
    224a:	3c d0       	rcall	.+120    	; 0x22c4 <__ultoa_invert+0x9c>
    224c:	67 0f       	add	r22, r23
    224e:	78 1f       	adc	r23, r24
    2250:	89 1f       	adc	r24, r25
    2252:	9a 1f       	adc	r25, r26
    2254:	a1 1d       	adc	r26, r1
    2256:	68 0f       	add	r22, r24
    2258:	79 1f       	adc	r23, r25
    225a:	8a 1f       	adc	r24, r26
    225c:	91 1d       	adc	r25, r1
    225e:	a1 1d       	adc	r26, r1
    2260:	6a 0f       	add	r22, r26
    2262:	71 1d       	adc	r23, r1
    2264:	81 1d       	adc	r24, r1
    2266:	91 1d       	adc	r25, r1
    2268:	a1 1d       	adc	r26, r1
    226a:	20 d0       	rcall	.+64     	; 0x22ac <__ultoa_invert+0x84>
    226c:	09 f4       	brne	.+2      	; 0x2270 <__ultoa_invert+0x48>
    226e:	68 94       	set
    2270:	3f 91       	pop	r19
    2272:	2a e0       	ldi	r18, 0x0A	; 10
    2274:	26 9f       	mul	r18, r22
    2276:	11 24       	eor	r1, r1
    2278:	30 19       	sub	r19, r0
    227a:	30 5d       	subi	r19, 0xD0	; 208
    227c:	31 93       	st	Z+, r19
    227e:	de f6       	brtc	.-74     	; 0x2236 <__ultoa_invert+0xe>
    2280:	cf 01       	movw	r24, r30
    2282:	08 95       	ret
    2284:	46 2f       	mov	r20, r22
    2286:	47 70       	andi	r20, 0x07	; 7
    2288:	40 5d       	subi	r20, 0xD0	; 208
    228a:	41 93       	st	Z+, r20
    228c:	b3 e0       	ldi	r27, 0x03	; 3
    228e:	0f d0       	rcall	.+30     	; 0x22ae <__ultoa_invert+0x86>
    2290:	c9 f7       	brne	.-14     	; 0x2284 <__ultoa_invert+0x5c>
    2292:	f6 cf       	rjmp	.-20     	; 0x2280 <__ultoa_invert+0x58>
    2294:	46 2f       	mov	r20, r22
    2296:	4f 70       	andi	r20, 0x0F	; 15
    2298:	40 5d       	subi	r20, 0xD0	; 208
    229a:	4a 33       	cpi	r20, 0x3A	; 58
    229c:	18 f0       	brcs	.+6      	; 0x22a4 <__ultoa_invert+0x7c>
    229e:	49 5d       	subi	r20, 0xD9	; 217
    22a0:	31 fd       	sbrc	r19, 1
    22a2:	40 52       	subi	r20, 0x20	; 32
    22a4:	41 93       	st	Z+, r20
    22a6:	02 d0       	rcall	.+4      	; 0x22ac <__ultoa_invert+0x84>
    22a8:	a9 f7       	brne	.-22     	; 0x2294 <__ultoa_invert+0x6c>
    22aa:	ea cf       	rjmp	.-44     	; 0x2280 <__ultoa_invert+0x58>
    22ac:	b4 e0       	ldi	r27, 0x04	; 4
    22ae:	a6 95       	lsr	r26
    22b0:	97 95       	ror	r25
    22b2:	87 95       	ror	r24
    22b4:	77 95       	ror	r23
    22b6:	67 95       	ror	r22
    22b8:	ba 95       	dec	r27
    22ba:	c9 f7       	brne	.-14     	; 0x22ae <__ultoa_invert+0x86>
    22bc:	00 97       	sbiw	r24, 0x00	; 0
    22be:	61 05       	cpc	r22, r1
    22c0:	71 05       	cpc	r23, r1
    22c2:	08 95       	ret
    22c4:	9b 01       	movw	r18, r22
    22c6:	ac 01       	movw	r20, r24
    22c8:	0a 2e       	mov	r0, r26
    22ca:	06 94       	lsr	r0
    22cc:	57 95       	ror	r21
    22ce:	47 95       	ror	r20
    22d0:	37 95       	ror	r19
    22d2:	27 95       	ror	r18
    22d4:	ba 95       	dec	r27
    22d6:	c9 f7       	brne	.-14     	; 0x22ca <__ultoa_invert+0xa2>
    22d8:	62 0f       	add	r22, r18
    22da:	73 1f       	adc	r23, r19
    22dc:	84 1f       	adc	r24, r20
    22de:	95 1f       	adc	r25, r21
    22e0:	a0 1d       	adc	r26, r0
    22e2:	08 95       	ret

000022e4 <__prologue_saves__>:
    22e4:	2f 92       	push	r2
    22e6:	3f 92       	push	r3
    22e8:	4f 92       	push	r4
    22ea:	5f 92       	push	r5
    22ec:	6f 92       	push	r6
    22ee:	7f 92       	push	r7
    22f0:	8f 92       	push	r8
    22f2:	9f 92       	push	r9
    22f4:	af 92       	push	r10
    22f6:	bf 92       	push	r11
    22f8:	cf 92       	push	r12
    22fa:	df 92       	push	r13
    22fc:	ef 92       	push	r14
    22fe:	ff 92       	push	r15
    2300:	0f 93       	push	r16
    2302:	1f 93       	push	r17
    2304:	cf 93       	push	r28
    2306:	df 93       	push	r29
    2308:	cd b7       	in	r28, 0x3d	; 61
    230a:	de b7       	in	r29, 0x3e	; 62
    230c:	ca 1b       	sub	r28, r26
    230e:	db 0b       	sbc	r29, r27
    2310:	0f b6       	in	r0, 0x3f	; 63
    2312:	f8 94       	cli
    2314:	de bf       	out	0x3e, r29	; 62
    2316:	0f be       	out	0x3f, r0	; 63
    2318:	cd bf       	out	0x3d, r28	; 61
    231a:	09 94       	ijmp

0000231c <__epilogue_restores__>:
    231c:	2a 88       	ldd	r2, Y+18	; 0x12
    231e:	39 88       	ldd	r3, Y+17	; 0x11
    2320:	48 88       	ldd	r4, Y+16	; 0x10
    2322:	5f 84       	ldd	r5, Y+15	; 0x0f
    2324:	6e 84       	ldd	r6, Y+14	; 0x0e
    2326:	7d 84       	ldd	r7, Y+13	; 0x0d
    2328:	8c 84       	ldd	r8, Y+12	; 0x0c
    232a:	9b 84       	ldd	r9, Y+11	; 0x0b
    232c:	aa 84       	ldd	r10, Y+10	; 0x0a
    232e:	b9 84       	ldd	r11, Y+9	; 0x09
    2330:	c8 84       	ldd	r12, Y+8	; 0x08
    2332:	df 80       	ldd	r13, Y+7	; 0x07
    2334:	ee 80       	ldd	r14, Y+6	; 0x06
    2336:	fd 80       	ldd	r15, Y+5	; 0x05
    2338:	0c 81       	ldd	r16, Y+4	; 0x04
    233a:	1b 81       	ldd	r17, Y+3	; 0x03
    233c:	aa 81       	ldd	r26, Y+2	; 0x02
    233e:	b9 81       	ldd	r27, Y+1	; 0x01
    2340:	ce 0f       	add	r28, r30
    2342:	d1 1d       	adc	r29, r1
    2344:	0f b6       	in	r0, 0x3f	; 63
    2346:	f8 94       	cli
    2348:	de bf       	out	0x3e, r29	; 62
    234a:	0f be       	out	0x3f, r0	; 63
    234c:	cd bf       	out	0x3d, r28	; 61
    234e:	ed 01       	movw	r28, r26
    2350:	08 95       	ret

00002352 <_exit>:
    2352:	f8 94       	cli

00002354 <__stop_program>:
    2354:	ff cf       	rjmp	.-2      	; 0x2354 <__stop_program>
